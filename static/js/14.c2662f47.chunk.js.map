{"version":3,"sources":["config/constants/nfts.ts","hooks/useApprove.ts","hooks/useTokenBalance.ts","hooks/useBlock.ts","config/constants/legendary.ts","hooks/useAllowance.ts","views/Legendary/components/InfoRow.tsx","views/Legendary/components/Image.tsx","views/Legendary/utils/contracts.ts","views/Legendary/contexts/NftProvider.tsx","views/Legendary/components/ClaimNftModal.tsx","views/Legendary/components/BurnNftModal.tsx","views/Legendary/components/TransferNftModal.tsx","views/Legendary/components/NftCard/index.tsx","views/Legendary/components/NftGrid.tsx","views/Legendary/components/NftList.tsx","views/Legendary/components/NftProgressSimple.tsx","views/Legendary/components/NftInfo.tsx","views/Legendary/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","useApprove","lpContract","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onApprove","useCallback","a","approve","tx","fetchFarmUserDataAsync","useSousApprove","sousId","sousChefContract","useSousChef","updateUserAllowance","useNftApprove","tokenContract","spenderAddress","methods","ethers","constants","MaxUint256","send","from","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","getContract","cakeABI","getCakeAddress","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","ethereum","fastRefresh","getTokenBalance","res","useBlock","useContext","BlockContext","LegendaryNftFarm","useNftAllowance","dependency","allowance","setAllowance","console","log","toString","fetch","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getFromWayArray","v","array","t","length","i","push","fromWei","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","multicall","epicNftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","ViewNft","NftCard","isOpen","nftCount","nftBurnCount","history","useHistory","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","nftIndex","indexOf","MINTS","MINTED","MAX_MINT","walletCanClaim","undefined","price","Math","round","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","NftProgressSimple","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","Nft","Page","size"],"mappings":"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","file":"static/js/14.c2662f47.chunk.js","sourcesContent":["import { Nft } from './types'\n\nexport const NftFarm = '0x08d2cBc5EFd1B56034F4628bB32e947C0d86BbB1'\nexport const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Count Pepes Chocula',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 0,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Vlad Pepes Drakul',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Pepes in Stone',\n    metadata: 'tier-NFT-base-marble.json',\n    description:\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'The path to Vladhalla',\n    metadata: '',\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\n    previewImage: 'preview-path-to-vladhalla.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 3,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Painted Pepe',\n    metadata: '',\n    description:\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\n    previewImage: 'preview-painted-pepes.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 4,\n    nftId: 4,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 5,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { Nft } from './types'\n\nexport const LegendaryNftFarm = '0x6a63AF63675D3c9D498DF43Aa163F9243E7b4646'\nexport const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Golden Pepes',\n    metadata: '',\n    description:\n      'For a brief period in time Pepe Drakul led a very powerful unit known as the 7 golden Vampires. He commissioned a bust made of the purest gold to commemorate his time with them.',\n    previewImage: 'preview-golden-pepes.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/Qmdv1t4kUa8YSP8rpZTXLKvpycnijWJdCSpjsN8sjArGx8?filename=NFT-legendary-pepes-gold.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 3,\n    tokenAmount: 1200,\n    tokenSupply: 6,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Immortality',\n    metadata: '',\n    description:\n      'Those who have ever held the Chalice of LIFE are granted Immortality. Do not fear eternal sleep/slumber, for it will not come for you.',\n    previewImage: 'preview-immortality.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmaHeTsV6AnhqWDAeBUvwmQbo7RC6bM1jQzVQUCQSLg9Bp?filename=NFT-legendary-immortality.png',\n    fileType: 'png',\n    blurImage: '',\n    sortOrder: 4,\n    nftId: 4,\n    tokenAmount: 1200,\n    tokenSupply: 6,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'The VladFather',\n    metadata: '',\n    description:\n      'His sceptre slammed into the marble floor with a crack, prompting the artist to begin. How many final breaths has that hand taken from his enemies? His eyes, wildly electric and filled with menace, and a stance that dares you to make your move. I don’t envy the one tasked with creating this portrait. Pepe Drakul has only ever posed for one drawing and this is it.',\n    previewImage: 'preview-the-vladfather.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmVEdevPc1nFLJrFQK4GsJtcS5486uaQE73mo7aKjw13ph?filename=NFT-legendary-vlad-father.png',\n    fileType: 'png',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 5,\n    tokenAmount: 1200,\n    tokenSupply: 6,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\nimport { LegendaryNftFarm } from 'config/constants/legendary'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(epicNftFarm, [\n          { address: LegendaryNftFarm, name: 'startBlockNumber' },\n          { address: LegendaryNftFarm, name: 'endBlockNumber' },\n          { address: LegendaryNftFarm, name: 'countBurnt' },\n          { address: LegendaryNftFarm, name: 'totalSupplyDistributed' },\n          { address: LegendaryNftFarm, name: 'currentDistributedSupply' },\n          { address: LegendaryNftFarm, name: 'allowMultipleClaims' },\n          { address: LegendaryNftFarm, name: 'rarity' },\n          { address: LegendaryNftFarm, name: 'priceMultiplier' },\n          { address: LegendaryNftFarm, name: 'maxMintPerNft' },\n          { address: LegendaryNftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(epicNftFarm, [\n          { address: LegendaryNftFarm, name: 'getMinted', params: [account] },\n        ])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    const fetchNonLoggedInContractData = async () => {\n      try {\n        const getMinted = await multicall(epicNftFarm, [{ address: LegendaryNftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] }])\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          amounts,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    } else {\n      fetchNonLoggedInContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\n  const contraToken = useERC20(getCakeAddress())\n  const allowance = useNftAllowance(contraToken, LegendaryNftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, LegendaryNftFarm)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getCakeAddress', getCakeAddress(), LegendaryNftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/legendary'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { useHistory } from 'react-router-dom'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 44px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ViewNft = styled(Text)`\n  @media (max-width: 1300px) {\n    font-size: 11px;\n  }\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n  const history = useHistory()\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  console.log('nftId', nftId)\n  console.log('nftIndex', nftIndex)\n\n  const MINTS = myMints[nftIndex] || 0\n\n  console.log(nftId, '?myMints', myMints, 'MINTS', MINTS)\n\n  // not sure about this, you need to check if this oser own this nft in the view nft page.\n  const youAreTheLastOwner = ownerById && ownerById[nftIndex] && ownerById[nftIndex].toString() === account.toString()\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : 6\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  let price = 1200\n\n  if (amounts && amounts[nftIndex]) {\n    price = Math.round(1200 * 1.37973 ** amounts[nftIndex] * 100) / 100\n  }\n\n  // console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  // console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n  console.log(nftId, 'walletCanClaim', walletCanClaim, MAX_MINT, MINTED, MAX_MINT)\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && !walletCanClaim && (\n            <Tag outline variant=\"failure\">\n              Sold Out\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {price} LIFE\n          </Button>\n        )}\n        {isInitialized && (\n          <Button fullWidth onClick={() => history.push(`legendary-detail/${nftId}`)} mt=\"24px\">\n            <ViewNft>\n              View NFT ({MINTED}/{tokenSupply} MINTED)\n            </ViewNft>\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for LIFE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>\n                {MINTED}/{tokenSupply}\n              </Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Owned By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/legendary'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Total Epic and Legendary NFTs')}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useHistory } from 'react-router-dom'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst CustomButton = styled(Button)`\n  margin-right: 20px;\n`\n\nconst GoldenButton = styled(Button)`\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\n  border: 1px solid #a55d07;\n  color: rgb(120, 50, 5);\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n\n  &:focus,\n  &:hover {\n    background-size: 150% 150%;\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n    border: 1px solid rgba(165, 93, 7, 0.6);\n    color: rgba(120, 50, 5, 0.8);\n  }\n  &:active {\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  }\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n  const history = useHistory()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"#9f0d0d\" mb=\"24px\">\n            Legendary NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"#9f0d0d\">\n            {TranslateString(999, 'Trade in for LIFE, or keep for your collection!')}\n          </Heading>\n          <CustomButton onClick={() => history.push(`nft`)} mt=\"24px\">\n            Base and Rare NFTs\n          </CustomButton>\n          <CustomButton variant=\"subtle\" onClick={() => history.push(`epic`)} mt=\"24px\">\n            Epic NFTs\n          </CustomButton>\n          <GoldenButton onClick={() => history.push(`legendary`)} mt=\"24px\">\n            Legendary NFTs\n          </GoldenButton>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}