{"version":3,"sources":["hooks/useTokenBalance.ts","hooks/useApprove.ts","hooks/useBlock.ts","hooks/useAllowance.ts","config/constants/epic.ts","views/Epic/components/InfoRow.tsx","views/Epic/components/Image.tsx","views/Epic/utils/contracts.ts","views/Epic/contexts/NftProvider.tsx","views/Epic/components/ClaimNftModal.tsx","views/Epic/components/BurnNftModal.tsx","views/Epic/components/TransferNftModal.tsx","views/Epic/components/NftCard/index.tsx","views/Epic/components/NftGrid.tsx","views/Epic/components/NftList.tsx","views/Epic/components/NftProgressSimple.tsx","views/Epic/components/NftInfo.tsx","views/Epic/index.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","useApprove","lpContract","dispatch","useDispatch","masterChefContract","useMasterchef","onApprove","useCallback","approve","tx","fetchFarmUserDataAsync","useNftApprove","tokenContract","spenderAddress","ethers","constants","MaxUint256","send","from","useBlock","useContext","BlockContext","useNftAllowance","dependency","allowance","setAllowance","console","log","toString","fetch","NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getFromWayArray","v","array","t","length","i","push","fromWei","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","multicall","nftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","ViewNft","NftCard","isOpen","nftCount","nftBurnCount","history","useHistory","MINTS","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","nftIndex","indexOf","MINTED","walletCanClaim","undefined","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","NftProgressSimple","NftInfo","StyledHero","textSubtle","Nft","Page","size"],"mappings":"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","file":"static/js/10.ecb09bbd.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import { Nft } from './types'\n\nexport const NftFarm = '0x6eF08433EA4885177c83fB9698D8B6F9277BeC5c'\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Epic',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 0,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/epic'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/epic'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'rarity' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' },\n          { address: NftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n  const contraToken = useERC20(getCakeAddress())\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, NftFarm)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getCakeAddress', getCakeAddress(), NftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/epic'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { useHistory } from 'react-router-dom'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 44px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ViewNft = styled(Text)`\n  @media (max-width: 1300px) {\n    font-size: 11px;\n  }\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n  const history = useHistory()\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\n  const MINTS = myMints[nftId] || 0\n  console.log(nftId, '?myMints', myMints, 'MINTS', MINTS)\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  // not sure about this, you need to check if this oser own this nft in the view nft page.\n  const youAreTheLastOwner = ownerById && ownerById[nftIndex] && ownerById[nftIndex].toString() === account.toString()\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < maxMintPerNft\n\n  // console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  // console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n  // console.log(nftId, 'walletCanClaim', walletCanClaim, maxMintPerNft, MINTED, MAX_MINT)\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && !walletCanClaim && (\n            <Tag outline variant=\"failure\">\n              Sold Out\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {tokenAmount} LIFE\n          </Button>\n        )}\n        {isInitialized && (\n          <Button fullWidth onClick={() => history.push(`epic-detail/${nftId}`)} mt=\"24px\">\n            <ViewNft>\n              View NFT ({MINTED}/{tokenSupply} MINTED)\n            </ViewNft>\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for LIFE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>\n                {state.nftCount + state.nftBurnCount}/{tokenSupply}\n              </Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Owned By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/epic'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Total NFTs claimed')}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useHistory } from 'react-router-dom'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n  const history = useHistory()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"#5ca269\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"#5ca269\">\n            {TranslateString(999, 'Trade in for LIFE, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <Button onClick={() => history.push(`nft`)} mt=\"24px\">\n          Common and Rare\n        </Button>\n        <Button onClick={() => history.push(`epic`)} mt=\"24px\">\n          Epic\n        </Button>\n        <Button onClick={() => history.push(`legendary`)} mt=\"24px\">\n          Legendary\n        </Button>\n        <NftInfo />\n        <NftList />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}