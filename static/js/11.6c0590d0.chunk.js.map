{"version":3,"sources":["config/constants/nfts.ts","hooks/useTokenBalance.ts","hooks/useApprove.ts","hooks/useBlock.ts","hooks/useAllowance.ts","views/Detail/components/InfoRow.tsx","views/Detail/components/Image.tsx","views/Detail/utils/contracts.ts","views/Detail/contexts/NftProvider.tsx","views/Detail/components/ClaimNftModal.tsx","views/Detail/components/BurnNftModal.tsx","views/Detail/components/TransferNftModal.tsx","views/Detail/components/NftCard/index.tsx","views/Detail/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","nftFarmContract","nftContract","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","useApprove","lpContract","dispatch","useDispatch","masterChefContract","useMasterchef","onApprove","useCallback","approve","tx","fetchFarmUserDataAsync","useNftApprove","tokenContract","spenderAddress","ethers","constants","MaxUint256","send","from","useBlock","useContext","BlockContext","useNftAllowance","dependency","allowance","setAllowance","console","log","toString","fetch","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","state","setState","currentBlock","multicall","nftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","parseInt","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","nftCount","nftBurnCount","PRICE","firstCharOfAccount","slice","lastCharOfAccount","walletCanClaim","isSupplyAvailable","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","width","controls","kind","outline","mt","p","endIcon","as","textAlign","StyledHero","textSubtle","Detail","props","match","nft1","nfts","filter","Page","size"],"mappings":"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","file":"static/js/11.6c0590d0.chunk.js","sourcesContent":["import { Nft } from './types'\n\n// mainnet\n// export const NftFarm = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\n// export const NFT = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\n\n// testnet\nexport const NftFarm = '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB'\nexport const NFT = '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Count Pepes Chocula',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Vlad Pepes Drakul',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Pepes in Stone',\n    metadata: 'tier-NFT-base-marble.json',\n    description:\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 3,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\n\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'rarity' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' },\n          { address: NftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: priceMultiplierArr[0].toString(),\n          maxMintPerNft: maxMintPerNftArr[0].toString(),\n          tokenPerBurn: tokenPerBurnArr[0].toString(),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getMinted[0][1]\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getMinted[0][3]\n        const prices = getMinted[0][4]\n\n        console.log('hasClaimed', hasClaimed)\n        console.log('amounts', amounts)\n        console.log('ownerById', ownerById)\n        console.log('maxMintByNft', maxMintByNft)\n        console.log('prices', prices)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n  const contraToken = useERC20(getCakeAddress())\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, NftFarm)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getCakeAddress', getCakeAddress(), NftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  console.log(ownerById)\n\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata } = nft\n  const PRICE = prices[nft.nftId] || tokenPerBurn // here we get the price\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  // const nftIndex = hasClaimedArr && hasClaimedArr.indexOf(nftId)\n\n  // const youAreOwner = ownerByIdArr && ownerByIdArr[nftIndex] === account\n\n  const walletCanClaim = !hasClaimed[nftId]\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      {fileType === 'mp4' && (\n        <video width=\"100%\" controls>\n          <source src={originalImage} type=\"video/mp4\" />\n          <track kind=\"captions\" />\n        </video>\n      )}\n      {fileType !== 'mp4' && (\n        <Image src={originalImage} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      )}\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {PRICE}\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for LIFE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Value if traded in')}:</Text>\n              <Value>10 LIFE</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>{state.nftCount + state.nftBurnCount}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './components/NftCard'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Detail = (props) => {\n  const TranslateString = useI18n()\n  const { match } = props\n  const id = parseInt(match.params.id)\n\n  const nft1 = nfts.filter((nft) => nft.nftId === id)\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"secondary\">\n            {TranslateString(999, 'Trade in for LIFE, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <NftCard nft={nft1[0]} />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Detail\n"],"sourceRoot":""}