{"version":3,"sources":["hooks/useTokenBalance.ts","config/index.ts","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","hooks/useBlock.ts","views/Nft/utils/contracts.ts","views/Nft/contexts/NftProvider.tsx","views/Nft/components/ClaimNftModal.tsx","views/Nft/components/BurnNftModal.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","utils/getTimePeriods.ts","utils/formatTimePeriod.ts","views/Nft/components/NftProgress.tsx","views/Nft/components/NftProgressSimple.tsx","views/Nft/components/SecondaryCard.tsx","views/Nft/components/CardContent.tsx","views/Nft/components/NoNftsToClaimCard.tsx","views/Nft/components/YouWonCard.tsx","views/Nft/components/NftInWalletCard.tsx","views/Nft/components/StatusCard.tsx","views/Nft/components/NftInfo.tsx","views/Nft/index.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","useBlock","useContext","BlockContext","getNftContract","contractOptions","nftAbi","nft","NFT","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","state","setState","currentBlock","multicall","nftFarm","address","NftFarm","name","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","prevState","toNumber","console","error","fetchContractData","nftContract","params","hasClaimedArr","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","parseInt","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","tokenAmount","color","mb","fullWidth","variant","onClick","disabled","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","AMOUNT_TO_CLAIM","style","alignItems","display","checked","scale","onChange","ml","cursor","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","nftCount","nftBurnCount","walletCanClaim","originalImage","description","isSupplyAvailable","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","log","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","timeLeft","years","months","days","hours","minutes","Math","floor","formatTimePeriod","periods","excludePeriods","textArr","Object","keys","forEach","period","includes","substr","join","TimeLeft","Heading","Link","UIKitLink","Message","textSubtle","ProgressWrap","NftProgress","secondsRemaining","progress","primaryStep","NftProgressSimple","SecondaryCard","textDisabled","Content","StyledCardContent","CardContent","imgSrc","NoNftsToClaimCard","YouWonCard","NftInWalletCard","StatusCard","UnlockButton","StyledNtfInfo","NftInfo","StyledHero","Nft","Page","size"],"mappings":"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","file":"static/js/12.b06ade4c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { AbiItem } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\n\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: boolean\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: false,\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n        const [hasClaimedArr] = await multicall(nftFarm, [{ address: NftFarm, name: 'hasClaimed', params: [account] }])\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n        const [hasClaimed]: [boolean] = hasClaimedArr\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          balanceOf,\n          nftMap,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  const handleConfirm = async () => {\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || cakeInWallet <= 0}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n  } = useContext(NftProviderContext)\n  const walletCanClaim = !hasClaimed\n  const { nftId, name, previewImage, originalImage, description } = nft\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  console.log(isInitialized, walletCanClaim, isSupplyAvailable)\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')}\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for LIFE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Value if traded in')}:</Text>\n              <Value>10 LIFE</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>{state.nftCount + state.nftBurnCount}</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number burned')}:</Text>\n              <Value>{state.nftBurnCount}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import getTimePeriods from './getTimePeriods'\n\n/**\n * @param {Object} periods Return value from getTimePeriods\n * @return {string} '14h 3m 4s'\n */\nconst formatTimePeriod = (periods: ReturnType<typeof getTimePeriods>, excludePeriods = []) => {\n  const textArr = []\n\n  Object.keys(periods).forEach((period) => {\n    if (periods[period] > 0 && !excludePeriods.includes(period)) {\n      textArr.push(`${periods[period]}${period.substr(0, 1)}`)\n    }\n  })\n\n  if (textArr.length === 0) {\n    return null\n  }\n\n  return textArr.join(' ')\n}\n\nexport default formatTimePeriod\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, OpenNewIcon, Text, Link as UIKitLink, Progress } from '@pancakeswap-libs/uikit'\nimport { BSC_BLOCK_TIME } from 'config'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport formatTimePeriod from 'utils/formatTimePeriod'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst TimeLeft = styled(Heading)`\n  margin-bottom: 16px;\n  text-align: center;\n`\n\nconst Link = styled(UIKitLink)`\n  text-decoration: underline;\n`\n\nconst Message = styled.p`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  padding-top: 16px;\n  text-align: center;\n`\n\nconst ProgressWrap = styled.div`\n  margin-bottom: 16px;\n`\n\nconst NftProgress = () => {\n  const {\n    isInitialized,\n    currentDistributedSupply,\n    totalSupplyDistributed,\n    countBurnt,\n    startBlockNumber,\n    endBlockNumber,\n  } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n  const currentBlock = useBlock()\n  const secondsRemaining = (endBlockNumber - currentBlock) * BSC_BLOCK_TIME\n\n  const timeLeft = formatTimePeriod(getTimePeriods(secondsRemaining), ['seconds'])\n  const totalBlocks = endBlockNumber - startBlockNumber\n  const progress = currentBlock > startBlockNumber ? ((currentBlock - startBlockNumber) / totalBlocks) * 100 : 5\n\n  return (\n    <Card>\n      <CardBody>\n        <ProgressWrap>\n          <Progress primaryStep={progress} />\n        </ProgressWrap>\n        <TimeLeft>\n          {timeLeft ? TranslateString(999, `${timeLeft} left to trade in NFTs`) : TranslateString(999, 'Finished!')}\n        </TimeLeft>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Can be traded until')}:</Text>\n          <div>\n            {!isInitialized ? (\n              '...'\n            ) : (\n              <Link href={`https://bscscan.com/block/${endBlockNumber}`} target=\"_blank\" rel=\"noreferrer noopener\">\n                {`Block ${endBlockNumber}`}\n                <OpenNewIcon color=\"primary\" ml=\"2px\" />\n              </Link>\n            )}{' '}\n          </div>\n        </InfoRow>\n        <Message>{TranslateString(999, 'NFTs can be traded in for CAKE until the above block height')}</Message>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgress\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import styled from 'styled-components'\n\nconst SecondaryCard = styled.div`\n  align-items: start;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 32px;\n  display: flex;\n  padding: 24px;\n`\n\nexport default SecondaryCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Image = styled.img`\n  margin-right: 16px;\n  width: 56px;\n`\n\nconst Content = styled.div`\n  flex: 1;\n`\n\nconst StyledCardContent = styled.div`\n  align-items: start;\n  display: flex;\n`\n\nconst CardContent = ({ imgSrc, children }) => {\n  return (\n    <StyledCardContent>\n      <Image src={imgSrc} alt=\"card icon\" />\n      <Content>{children}</Content>\n    </StyledCardContent>\n  )\n}\n\nexport default CardContent\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport SecondaryCard from './SecondaryCard'\nimport CardContent from './CardContent'\n\nconst NoNftsToClaimCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <SecondaryCard>\n      <CardContent imgSrc=\"/images/present-disabled.svg\">\n        <Heading mb=\"8px\">{TranslateString(999, 'No NFTs to claim')}</Heading>\n        <Text>\n          {TranslateString(\n            999,\n            'You have no NFTs to claim at this time, but you can still see the NFTs in this series below.',\n          )}\n        </Text>\n      </CardContent>\n    </SecondaryCard>\n  )\n}\n\nexport default NoNftsToClaimCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst YouWonCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFTs Avaiable!')}</Heading>\n          <Text>{TranslateString(999, 'Claim an NFT from the options below!')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default YouWonCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst NftInWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFT in wallet')}</Heading>\n          <Text>{TranslateString(999, 'Trade in your NFT for LIFE, or just keep it for your collection.')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftInWalletCard\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NoNftsToClaimCard from './NoNftsToClaimCard'\nimport YouWonCard from './YouWonCard'\nimport NftInWalletCard from './NftInWalletCard'\n\n/**\n * Possible states\n *\n * 1. Disconnected wallet\n * 2. No NFT's to claim\n * 3. You won an NFT\n * 4. NFT in wallet\n */\nconst StatusCard = () => {\n  const { account } = useWallet()\n  const { isInitialized, hasClaimed, balanceOf } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n\n  if (!account) {\n    return (\n      <Card isActive>\n        <CardBody>\n          <Heading mb=\"8px\">{TranslateString(999, 'Wallet Disconnected')}</Heading>\n          <Text mb=\"16px\">{TranslateString(999, 'Connect to see if you have won an NFT!')}</Text>\n          <UnlockButton />\n        </CardBody>\n      </Card>\n    )\n  }\n\n  if (!isInitialized) {\n    return <Text>...</Text>\n  }\n\n  if (!hasClaimed) {\n    return <YouWonCard />\n  }\n\n  if (balanceOf > 0) {\n    return <NftInWalletCard />\n  }\n\n  return <NoNftsToClaimCard />\n}\n\nexport default StatusCard\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  if (!canBurnNft) {\n    return <NftProgressSimple />\n  }\n\n  return (\n    <StyledNtfInfo>\n      <NftProgress />\n      <StatusCard />\n    </StyledNtfInfo>\n  )\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"secondary\">\n            {TranslateString(999, 'Trade in for LIFE, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}