{"version":3,"sources":["hooks/useTokenBalance.ts","config/index.ts","hooks/useApprove.ts","config/constants/nfts.ts","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","hooks/useBlock.ts","views/Nft/utils/contracts.ts","views/Nft/contexts/NftProvider.tsx","views/Nft/components/ClaimNftModal.tsx","hooks/useAllowance.ts","views/Nft/components/BurnNftModal.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","utils/getTimePeriods.ts","utils/formatTimePeriod.ts","views/Nft/components/NftProgress.tsx","views/Nft/components/NftProgressSimple.tsx","views/Nft/components/SecondaryCard.tsx","views/Nft/components/CardContent.tsx","views/Nft/components/NoNftsToClaimCard.tsx","views/Nft/components/YouWonCard.tsx","views/Nft/components/NftInWalletCard.tsx","views/Nft/components/StatusCard.tsx","views/Nft/components/NftInfo.tsx","views/Nft/index.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","useApprove","lpContract","dispatch","useDispatch","masterChefContract","useMasterchef","onApprove","useCallback","approve","tx","fetchFarmUserDataAsync","useNftApprove","tokenContract","spenderAddress","ethers","constants","MaxUint256","send","from","NftFarm","NFT","Nfts","name","metadata","description","previewImage","originalImage","blurImage","sortOrder","nftId","tokenAmount","nftFarmContract","nftContract","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","useBlock","useContext","BlockContext","getNftContract","contractOptions","nftAbi","nft","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","state","setState","currentBlock","multicall","nftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","toString","console","error","fetchContractData","params","getMinted","log","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","parseInt","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","allowance","dependency","setAllowance","fetch","useNftAllowance","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","nftCount","nftBurnCount","PRICE","firstCharOfAccount","slice","lastCharOfAccount","walletCanClaim","isSupplyAvailable","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","timeLeft","years","months","days","hours","minutes","Math","floor","formatTimePeriod","periods","excludePeriods","textArr","Object","keys","forEach","period","includes","substr","join","TimeLeft","Heading","Link","UIKitLink","Message","textSubtle","ProgressWrap","NftProgress","secondsRemaining","progress","primaryStep","NftProgressSimple","SecondaryCard","textDisabled","Content","StyledCardContent","CardContent","imgSrc","NoNftsToClaimCard","YouWonCard","NftInWalletCard","StatusCard","UnlockButton","StyledNtfInfo","NftInfo","StyledHero","Nft","Page","size"],"mappings":"sTA6BaA,EAAiB,WAAO,IAC3BC,EAAgBC,cAAhBD,YAD0B,EAEIE,qBAFJ,mBAE3BC,EAF2B,KAEdC,EAFc,KAclC,OAVAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQC,EAAeC,YAAYC,EAASC,eAD5C,SAEuBH,EAAaI,QAAQR,cAAcS,OAF1D,OAEQC,EAFR,OAGET,EAAe,IAAIU,IAAUD,IAH/B,4CADc,uBAAC,WAAD,wBAOdE,KACC,CAACf,IAEGG,GAGIa,EAAmB,SAACC,GAA0B,IAAD,EAC1Bf,mBAAS,IAAIY,IAAU,IADG,mBACjDI,EADiD,KACxCC,EADwC,KAEhDnB,EAAgBC,cAAhBD,YAYR,OAVAK,qBAAU,YACU,uCAAG,8BAAAC,EAAA,6DACbC,EAAeC,YAAYC,EAASC,eADvB,SAEDH,EAAaI,QAAQS,UAAU,8CAA8CR,OAF5E,OAEbS,EAFa,OAGnBF,EAAW,IAAIL,IAAUO,IAHN,2CAAH,qDAMlBC,KACC,CAACL,EAAcjB,IAEXkB,GAGMK,IArDS,SAACN,GAA0B,IAAD,EAClBf,mBAAS,IAAIY,IAAU,IADL,mBACzCI,EADyC,KAChCC,EADgC,OAEuBK,cAA/DC,EAFwC,EAExCA,QAASC,EAF+B,EAE/BA,SACTC,EAAgB1B,cAAhB0B,YAaR,OAXAtB,qBAAU,WAMJoB,GAAWC,GALG,uCAAG,4BAAApB,EAAA,sEACDsB,YAAgBF,EAAUT,EAAcQ,GADvC,OACbI,EADa,OAEnBV,EAAW,IAAIL,IAAUe,IAFN,2CAAH,oDAMhBP,KAED,CAACG,EAASC,EAAUT,EAAcU,IAE9BT,I,iCC1BT,iFAEAJ,IAAUgB,OAAO,CACfC,eAAgB,IAChBC,eAAgB,KAGY,IAAIlB,IAAU,GAArC,IACMmB,EAAkB,IAAInB,IAAU,SAChCoB,EAAiB,G,4LCCjBC,EAAa,SAACC,GACzB,IAAMC,EAAWC,cACTb,EAAiCD,cAAjCC,QACFc,EAAqBC,cAY3B,MAAO,CAAEC,UAVaC,sBAAW,sBAAC,4BAAApC,EAAA,+EAEbqC,YAAQP,EAAYG,EAAoBd,GAF3B,cAExBmB,EAFwB,OAG9BP,EAASQ,YAAuBpB,IAHF,kBAIvBmB,GAJuB,0DAMvB,GANuB,yDAQ/B,CAACnB,EAASY,EAAUD,EAAYG,MA4DxBO,EAAgB,SAACC,EAAyBC,GAA4B,IACzEvB,EAAYD,cAAZC,QAYR,OAXkBiB,sBAAW,sBAAC,4BAAApC,EAAA,+EAETyC,EAAcpC,QAC5BgC,QAAQK,EAAgBC,SAAOC,UAAUC,YACzCC,KAAK,CAAEC,KAAM5B,IAJU,cAEpBmB,EAFoB,yBAKnBA,GALmB,0DAOnB,GAPmB,yDAS3B,CAACnB,EAASuB,EAAgBD,M,sKCvFlBO,EAAU,6CACVC,EAAM,6CA6CJC,EA1CK,CAClB,CACEC,KAAM,iBACNC,SAAU,oCACVC,YAAa,mBACbC,aAAc,kCACdC,cAAe,GACfC,UAAW,GACXC,UAAW,EACXC,MAAO,EACPC,YAAa,GACbC,gBAAiB,6CACjBC,YAAa,8CAEf,CACEV,KAAM,gBACNC,SAAU,kCACVC,YAAa,mBACbC,aAAc,gCACdC,cAAe,GACfC,UAAW,GACXC,UAAW,EACXC,MAAO,EACPC,YAAa,GACbC,gBAAiB,6CACjBC,YAAa,8CAEf,CACEV,KAAM,SACNC,SAAU,4BACVC,YAAa,mBACbC,aAAc,0BACdC,cAAe,GACfC,UAAW,GACXC,UAAW,EACXC,MAAO,EACPC,YAAa,GACbC,gBAAiB,6CACjBC,YAAa,+C,gDCzCFC,EANCC,IAAOC,IAAV,yG,OCOPC,EAAYF,IAAOC,IAAV,2IACO,qBAAGE,MAAkBC,OAAOC,eAO5CC,EAAcN,IAAOO,IAAV,oMA2BFC,EAhBqB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,aACzCpB,EAAe,cAACe,EAAD,CAAaG,IAAKA,EAAKC,IAAKA,IAEjD,OACE,cAACR,EAAD,UACGS,EACC,mBAAGC,KAAMD,EAAcE,OAAO,SAASC,IAAI,sBAA3C,SACGvB,IAGHA,K,2BC9BOwB,GALE,WAEf,OADsBC,qBAAWC,O,sCCUtBC,GAAiB,SAACC,GAC7B,IAAMC,EAAUC,GAChB,OAAOlF,aAAYiF,EAAQlC,EAAKiC,IC+BrBG,GAAqBC,wBAA8B,MA8MjDC,GA5MiC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3CC,EAAYC,kBAAO,GADuC,EAEtC9F,mBAAgB,CACxC+F,eAAe,EACfC,WAAY,GACZC,UAAW,GACXC,WAAY,EACZC,iBAAkB,EAClBC,eAAgB,EAChBC,uBAAwB,EACxBC,yBAA0B,EAC1BpF,UAAW,EACXqF,OAAQ,GAERC,qBAAqB,EACrBC,OAAQ,GACRC,gBAAiB,EACjBC,cAAe,EACfC,aAAc,EAEdC,QAAS,GACTC,aAAc,GACdC,OAAQ,KAtBsD,mBAEzDC,EAFyD,KAElDC,EAFkD,KAyBxD1F,EAAYD,cAAZC,QACF2F,EAAehC,KAEba,EAAkBiB,EAAlBjB,cAGR5F,qBAAU,YACe,uCAAG,sEAAAC,EAAA,+EAcZ+G,aAAUC,GAAS,CAC3B,CAAEC,QAASjE,EAASG,KAAM,oBAC1B,CAAE8D,QAASjE,EAASG,KAAM,kBAC1B,CAAE8D,QAASjE,EAASG,KAAM,cAC1B,CAAE8D,QAASjE,EAASG,KAAM,0BAC1B,CAAE8D,QAASjE,EAASG,KAAM,4BAC1B,CAAE8D,QAASjE,EAASG,KAAM,uBAC1B,CAAE8D,QAASjE,EAASG,KAAM,UAC1B,CAAE8D,QAASjE,EAASG,KAAM,mBAC1B,CAAE8D,QAASjE,EAASG,KAAM,iBAC1B,CAAE8D,QAASjE,EAASG,KAAM,kBAxBN,oCAGpB+D,EAHoB,KAIpBC,EAJoB,KAKpBC,EALoB,KAMpBC,EANoB,KAOpBC,EAPoB,KASpBC,EAToB,KAUpBC,EAVoB,KAWpBC,EAXoB,KAYpBC,EAZoB,KAapBC,EAboB,mBA4BkBT,EA5BlB,GA4BfnB,EA5Be,mBA6BgBoB,EA7BhB,GA6BfnB,EA7Be,mBA8BYoB,EA9BZ,GA8BftB,EA9Be,mBA+BwBuB,EA/BxB,GA+BfpB,EA/Be,mBAgC0BqB,EAhC1B,GAgCfpB,EAhCe,KAkCtBW,GAAS,SAACe,GAAD,mBAAC,eACLA,GADI,IAEPjC,eAAe,EACfG,WAAYA,EAAW+B,WACvB9B,iBAAkBA,EAAiB8B,WACnC7B,eAAgBA,EAAe6B,WAC/B3B,yBAA0BA,EAAyB2B,WACnD5B,uBAAwBA,EAAuB4B,WAC/CzB,oBAAqBmB,EAAuB,GAC5ClB,OAAQmB,EAAU,GAAGM,WACrBxB,gBAAiBmB,EAAmB,GAAGK,WACvCvB,cAAemB,EAAiB,GAAGI,WACnCtB,aAAcmB,EAAgB,GAAGG,gBA9Cb,kDAiDtBC,QAAQC,MAAM,mBAAd,MAjDsB,0DAAH,qDAqDvBC,KACC,CAACtC,EAAekB,IAGnB9G,qBAAU,WAiFJoB,GAhFmB,uCAAG,oDAAAnB,EAAA,sEAEhB6D,EAAcoB,KAFE,SAIE8B,aAAUC,GAAS,CAAC,CAAEC,QAASjE,EAASG,KAAM,YAAa+E,OAAQ,MAJrE,cAIhBC,EAJgB,OAQhBvC,EAAauC,EAAU,GAAG,GAC1B1B,EAAU0B,EAAU,GAAG,GACvBtC,EAAYsC,EAAU,GAAG,GACzBzB,EAAeyB,EAAU,GAAG,GAC5BxB,EAASwB,EAAU,GAAG,GAE5BJ,QAAQK,IAAI,aAAcxC,GAC1BmC,QAAQK,IAAI,UAAW3B,GACvBsB,QAAQK,IAAI,YAAavC,GACzBkC,QAAQK,IAAI,eAAgB1B,GAC5BqB,QAAQK,IAAI,SAAUzB,GAlBA,UAoBE9C,EAAYxD,QAAQS,UAAUK,GAASb,OApBzC,WAoBhBQ,EApBgB,OAsBlBqF,EAAmB,KAInBrF,EAAY,GA1BM,iBAwCpB,IAbMuH,EA3Bc,+BAAArI,EAAA,MA2BS,WAAOsI,GAAP,iBAAAtI,EAAA,+EAEH6D,EAAYxD,QAAQkI,oBAAoBpH,EAASmH,GAAOhI,OAFrD,cAEnBkI,EAFmB,gBAGL3E,EAAYxD,QAAQoI,WAAWD,GAASlI,OAHnC,cAGnBoD,EAHmB,yBAKlB,CAACgF,SAAShF,EAAO,IAAKgF,SAASF,EAAS,MALtB,2DAOlB,MAPkB,0DA3BT,sDAsCdG,EAAkB,GAEfC,EAAI,EAAGA,EAAI9H,EAAW8H,IAC7BD,EAAgBE,KAAKR,EAAqBO,IAzCxB,iBA4CgBE,QAAQC,IAAIJ,GA5C5B,QA4CdK,EA5Cc,OAgDpB7C,EAAS6C,EAAsBC,QAAO,SAACC,EAAOC,GAC5C,IAAKA,EACH,OAAOD,EAFmD,kBAKnCC,EALmC,GAKrDzF,EALqD,KAK9C8E,EAL8C,KAO5D,OAAO,2BACFU,GADL,kBAEGxF,EAAQwF,EAAMxF,GAAN,uBAAmBwF,EAAMxF,IAAzB,CAAiC8E,IAAW,CAACA,OAEvD,IA3DiB,QA8DtB3B,GAAS,SAACe,GAAD,mBAAC,eACLA,GADI,IAEPjC,eAAe,EACfC,aACAC,YACA/E,YACAqF,SAEAM,UACAC,eACAC,cAxEoB,kDA4EtBoB,QAAQC,MAAM,mBAAd,MA5EsB,0DAAH,oDAiFrBC,KAED,CAACtC,EAAexE,EAAS0F,IAE5B9G,qBAAU,WACR,OAAO,WACL0F,EAAU2D,SAAU,KAErB,CAAC3D,IAEJ,IAAM4D,EAAavC,GAAgBF,EAAMZ,eAgBzC,OACE,cAACX,GAAmBiE,SAApB,CAA6BC,MAAK,2BAAO3C,GAAP,IAAcyC,aAAYG,YAhB1C,SAAC9F,GAAD,OAAmBkD,EAAMT,OAAOzC,IAgBuB+F,aAVtD,WAIfhE,EAAU2D,SACZvC,GAAS,SAACe,GAAD,mBAAC,eAAoBA,GAArB,IAAgCjC,eAAe,UAK1D,SACGH,K,8ECnODkE,GAAQ3F,YAAO4F,IAAP5F,CAAH,iDAIL6F,GAAe7F,IAAOC,IAAV,oDAIZ6F,GAAU9F,IAAOC,IAAV,0GAiGE8F,GA3FqC,SAAC,GAAmC,IAAjC1E,EAAgC,EAAhCA,IAAK2E,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACnDpK,oBAAS,GAD0C,mBAC9EqK,EAD8E,KACnEC,EADmE,OAEnDtK,oBAAS,GAF0C,mBAE9EuK,EAF8E,KAEnEC,EAFmE,OAG3DxK,mBAAS,MAHkD,mBAG9EoI,EAH8E,KAGvEqC,EAHuE,KAI/EC,EAAkBC,cAChBpJ,EAAYD,cAAZC,QACFqJ,EAAqBC,aAAqBzH,GAC1C0H,EAAcC,aAASvK,gBACvBwK,ECQuB,SAACnI,EAAyBC,EAAwBmI,GAAsB,IAC7F1J,EAAiCD,cAAjCC,QAD4F,EAElEvB,mBAAS,MAFyD,mBAE7FgL,EAF6F,KAElFE,EAFkF,KAiBpG,OAbA/K,qBAAU,YACG,uCAAG,4BAAAC,EAAA,+EAEQyC,EAAcpC,QAAQuK,UAAUzJ,EAASuB,GAAgBpC,OAFjE,OAEJiB,EAFI,OAGVuJ,EAAa,IAAItK,KAAUe,IAHjB,gDAKVwG,QAAQK,IAAI,KAAEN,YACdgD,EAAa,MANH,yDAAH,oDASXC,KACC,CAAC5J,EAASuB,EAAgBD,EAAeoI,IAErCD,EDzBWI,CAAgBN,EAAa1H,EAASmH,GAClDhI,EAAYK,aAAckI,EAAa1H,GACvCiI,EAAchK,aAAgBb,gBAC9B8K,EAAeC,aAAiBF,GAKhCG,EAAa,uCAAG,sBAAApL,EAAA,yDACF,OAAd4K,EADgB,0EAMZJ,EAAmBnK,QACtBgL,QAAQjG,EAAI1B,OACZZ,KAAK,CAAEC,KAAM5B,IACbmK,GAAG,WAAW,WACbpB,GAAa,MAEdoB,GAAG,WAAW,WACbtB,IACAD,OAEDuB,GAAG,SAAS,WACXvD,QAAQC,MAAMA,GACdqC,EAAS,uBACTH,GAAa,MAnBC,uDAsBlBnC,QAAQC,MAAM,sBAAd,MAtBkB,yDAAH,qDAgCnB,OANAjI,qBAAU,WACa,IAAjBmL,GACFb,EAAS,6CAEV,CAACa,EAAcb,IAGhB,eAAC,IAAD,CAAOkB,MAAK,wBAAmBnG,EAAIzB,YAAvB,SAA2CqG,UAAWA,EAAlE,UACE,eAACJ,GAAD,WACG5B,GACC,cAAC,IAAD,CAAMwD,MAAM,UAAUC,GAAG,MAAzB,SACGzD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOsC,EAAgB,IAAK,oBAA5B,OACA,cAACZ,GAAD,wBAAetE,EAAIjC,KAAnB,iBAGJ,eAAC0G,GAAD,WACE,cAAC,IAAD,CACE6B,WAAS,EACTC,UAAWxK,GAAWgJ,GAAaF,GAAaW,EAAY,EAC5DgB,QAAO,sBAAE,sBAAA5L,EAAA,sEAELoK,GAAa,GAFR,SAGCjI,IAHD,OAILiI,GAAa,GAJR,gDAMLA,GAAa,GACbrC,QAAQC,MAAR,MAPK,yDAHX,qBAiBA,cAAC,IAAD,CACE0D,WAAS,EACTE,QAASR,EACTO,UAAWxK,GAAW8I,GAAaiB,GAAgB,GAAKN,GAAa,EAHvE,SAKGN,EAAgB,IAAK,oBEtG1BZ,GAAQ3F,YAAO4F,IAAP5F,CAAH,iDAIL6F,GAAe7F,IAAOC,IAAV,oDAIZ6F,GAAU9F,IAAOC,IAAV,0GA+EE6H,GAzEmC,SAAC,GAA6C,IAA3CzG,EAA0C,EAA1CA,IAAK0G,EAAqC,EAArCA,SAAU/B,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EAC3DpK,oBAAS,GADkD,mBACtFqK,EADsF,KAC3EC,EAD2E,OAEnEtK,mBAAS,MAF0D,mBAEtFoI,EAFsF,KAE/EqC,EAF+E,OAG7DzK,oBAAS,GAHoD,mBAGtFmM,EAHsF,KAG5EC,EAH4E,KAIvF1B,EAAkBC,cAChBpJ,EAAYD,cAAZC,QACFqJ,EAAqBC,aAAqBzH,GAE1CoI,EAAa,uCAAG,8BAAApL,EAAA,oFAEA8L,EAFA,GAEXtD,EAFW,cAIZgC,EAAmBnK,QACtB4L,QAAQzD,GACR1F,KAAK,CAAEC,KAAM5B,IACbmK,GAAG,WAAW,WACbpB,GAAa,MAEdoB,GAAG,WAAW,WACbtB,IACAD,OAEDuB,GAAG,SAAS,WACXvD,QAAQC,MAAMA,GACdqC,EAAS,sBACTH,GAAa,MAjBC,sDAoBlBnC,QAAQC,MAAM,sBAAd,MApBkB,wDAAH,qDAwBnB,OACE,eAAC,IAAD,CAAOuD,MAAOjB,EAAgB,IAAK,gBAAiBN,UAAWA,EAA/D,UACE,eAAC,GAAD,WACGhC,GACC,cAAC,IAAD,CAAMwD,MAAM,UAAUC,GAAG,MAAzB,SACGzD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOsC,EAAgB,IAAK,YAA5B,OACA,cAAC,GAAD,wBAAelF,EAAIjC,KAAnB,cAEF,eAAC,EAAD,WACE,eAAC,IAAD,WAAOmH,EAAgB,IAAK,oBAA5B,OACA,eAAC,GAAD,eRpEqB,KQoErB,iBAGJ,eAAC,GAAD,WACE,cAAC,IAAD,CAAMkB,MAAM,UAAZ,SACGlB,EAAgB,IAAK,qFAExB,cAAC,IAAD,CAAMkB,MAAM,UAAZ,SAAuBlB,EAAgB,IAAK,uDAE9C,eAAC,GAAD,CAAc4B,MAAO,CAAEC,WAAY,SAAUC,QAAS,eAAtD,UACE,cAAC,IAAD,CAAUC,QAASN,EAAUO,MAAM,KAAKC,SAAU,kBAAMP,GAAaD,MACrE,cAAC,IAAD,CAAMS,GAAG,MAAMZ,QAAS,kBAAMI,GAAaD,IAAWG,MAAO,CAAEO,OAAQ,WAAvE,SACGnC,EAAgB,IAAK,qBAG1B,eAAC,GAAD,WACE,cAAC,IAAD,CAAQoB,WAAS,EAACgB,QAAQ,YAAYd,QAAS5B,EAA/C,SACGM,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQoB,WAAS,EAACE,QAASR,EAAeO,UAAWxK,GAAW8I,IAAc8B,EAA9E,SACGzB,EAAgB,IAAK,oB,qBC/E1BZ,GAAQ3F,YAAO4F,IAAP5F,CAAH,iDAIL6F,GAAe7F,IAAOC,IAAV,oDAIZ6F,GAAU9F,IAAOC,IAAV,0GAMP2I,GAAQ5I,IAAO6I,MAAV,0GACA,qBAAG1I,MAAkBC,OAAO0I,QAmFxBC,GA7E2C,SAAC,GAA6C,IAA3C1H,EAA0C,EAA1CA,IAAK0G,EAAqC,EAArCA,SAAU/B,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACnEpK,oBAAS,GAD0D,mBAC9FqK,EAD8F,KACnFC,EADmF,OAE3EtK,mBAAS,IAFkE,mBAE9F2J,EAF8F,KAEvFwD,EAFuF,OAG3EnN,mBAAS,MAHkE,mBAG9FoI,EAH8F,KAGvFqC,EAHuF,KAI/FC,EAAkBC,cAChBpJ,EAAYD,cAAZC,QACF0C,EAAcmJ,aAAkB/J,GAEhCmI,EAAa,uCAAG,sBAAApL,EAAA,kEAEKiN,KAAKC,MAAMC,UAAU5D,GAF1B,gBAKhBc,EAASC,EAAgB,IAAK,wCALd,sCAOVzG,EAAYxD,QACf+M,aAAajM,EAASoI,EAAOuC,EAAS,IACtChJ,KAAK,CAAEC,KAAM5B,IACbmK,GAAG,WAAW,WACbpB,GAAa,MAEdoB,GAAG,WAAW,WACbtB,IACAD,OAEDuB,GAAG,SAAS,WACXvD,QAAQC,MAAMA,GACdqC,EAAS,0BACTH,GAAa,MApBD,yDAwBlBnC,QAAQC,MAAM,0BAAd,MAxBkB,0DAAH,qDAiCnB,OACE,eAAC,IAAD,CAAOuD,MAAOjB,EAAgB,IAAK,gBAAiBN,UAAWA,EAA/D,UACE,eAAC,GAAD,WACGhC,GACC,cAAC,IAAD,CAAMwD,MAAM,UAAUC,GAAG,MAAzB,SACGzD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOsC,EAAgB,IAAK,gBAA5B,OACA,cAAC,GAAD,wBAAelF,EAAIjC,KAAnB,cAEF,eAACwJ,GAAD,CAAOU,QAAQ,kBAAf,UAAkC/C,EAAgB,IAAK,qBAAvD,OACA,cAAC,IAAD,CACEgD,GAAG,kBACHnK,KAAK,UACLoK,KAAK,OACLC,YAAalD,EAAgB,IAAK,iBAClCf,MAAOA,EACPgD,SAxBa,SAACkB,GAA8C,IACnDC,EAAeD,EAAI7I,OAA1B2E,MACRwD,EAASW,IAuBHC,UAAW3F,EACX2D,SAAU1B,OAGd,eAAC,GAAD,WACE,cAAC,IAAD,CAAQyB,WAAS,EAACgB,QAAQ,YAAYd,QAAS5B,EAA/C,SACGM,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQoB,WAAS,EAACE,QAASR,EAAeO,UAAWxK,GAAW8I,IAAcV,EAA9E,SACGe,EAAgB,IAAK,oBC/E1BsD,GAAS7J,YAAOD,EAAPC,CAAH,iDAIN8J,GAAgB9J,YAAO+J,KAAQC,MAAM,CAAErB,QAAS,OAAQhB,WAAW,GAAnD3H,CAAH,gNAabiK,GAAYjK,IAAOC,IAAV,qDAIT0F,GAAQ3F,YAAO4F,IAAP5F,CAAH,iDAgLIkK,GA5KyB,SAAC,GAAa,IAAX7I,EAAU,EAAVA,IAAU,EACzBxF,mBAAS,CACjCqK,WAAW,EACXiE,QAAQ,EACRC,SAAU,EACVC,aAAc,IALmC,mBAC5CxH,EAD4C,KACrCC,EADqC,KAO7CyD,EAAkBC,cAP2B,EAyB/CxF,qBAAWM,IAhBbM,EATiD,EASjDA,cACAC,EAViD,EAUjDA,WACAC,EAXiD,EAWjDA,UACAwD,EAZiD,EAYjDA,WACApD,EAbiD,EAajDA,uBACAC,EAdiD,EAcjDA,yBACAsD,EAfiD,EAejDA,YACAC,EAhBiD,EAgBjDA,aAEApD,GAlBiD,EAiBjDD,oBAjBiD,EAkBjDC,QACAC,EAnBiD,EAmBjDA,gBACAC,EApBiD,EAoBjDA,cACAC,EArBiD,EAqBjDA,aACAC,EAtBiD,EAsBjDA,QACAC,EAvBiD,EAuBjDA,aACAC,EAxBiD,EAwBjDA,OAEMxF,EAAYD,cAAZC,QAER4G,QAAQK,IAAI,yBAA0BnC,EAAwBI,EAAQC,EAClEC,EAAeC,GACnBuB,QAAQK,IAAI,iBAAkB5B,EAAcC,EAASC,EAAcC,GAQnEoB,QAAQK,IAAIvC,GAtCuC,IAyC3CnC,EAA0D0B,EAA1D1B,MAAOP,EAAmDiC,EAAnDjC,KAAMG,EAA6C8B,EAA7C9B,aAAcC,EAA+B6B,EAA/B7B,cAAeF,EAAgB+B,EAAhB/B,YAC5CgL,EAAQ1H,EAAOvB,EAAI1B,QAAU8C,EAM7B8H,GAJqB1I,EAAW,GACZC,EAAU,GAGE,MAAX1E,GAAmBA,EAAQoN,MAAM,EAAG,IACzDC,EAA+B,MAAXrN,GAAmBA,EAAQoN,OAAO,GAWtDE,GATyB,MAAXtN,GAAA,UAAsBmN,EAAtB,cAA8CE,IAS1C5I,EAAWlC,IAE7BoI,EAAWtC,EAAY9F,GACvBgL,EAAoBxI,EAA2BD,EAC/C0I,EAAgB7C,GAAYA,EAAS8C,OAAS,EAC9CC,EAAOjI,EAAMsH,OAASY,IAAgBC,IAEtCC,EAAe5M,sBAAW,sBAAC,kCAAApC,EAAA,6DAC/B6G,GAAS,SAACe,GAAD,mBAAC,eAAoBA,GAArB,IAAgCqC,WAAW,OADrB,WAGThF,KAAZ5E,EAHqB,EAGrBA,QAHqB,SAINA,EAAQ8N,SAASzK,GAAOpD,OAJlB,cAIvB6N,EAJuB,gBAKF9N,EAAQ+N,aAAa1K,GAAOpD,OAL1B,OAKvB8N,EALuB,OAO7BvH,GAAS,SAACe,GAAD,mBAAC,eACLA,GADI,IAEPqC,WAAW,EACXgF,eAAe,EACfd,SAAUzF,SAASyF,EAAU,IAC7BC,aAAc1F,SAAS0F,EAAc,SAZV,kDAe7BrG,QAAQC,MAAR,MAf6B,0DAiB9B,CAACtE,IAEEwL,EAAW,uCAAG,sBAAAlP,EAAA,0DACd4G,EAAMsH,OADQ,gBAEhBrH,GAAS,SAACe,GAAD,mBAAC,eAAoBA,GAArB,IAAgCsG,QAAStG,EAAUsG,YAF5C,gDAKRc,IALQ,uDAOdjH,QAAQC,MAAR,MAPc,yBASdnB,GAAS,SAACe,GAAD,mBAAC,eAAoBA,GAArB,IAAgCsG,QAAStG,EAAUsG,YAT9C,4EAAH,qDAcXiB,EAAgB,WACpBH,IACAvF,KAtGiD,EAyGrB2F,YAAS,cAAC,GAAD,CAAehK,IAAKA,EAAK2E,UAAWoF,KAApEE,EAzG4C,sBA0GtBD,YAAS,cAAC,GAAD,CAAchK,IAAKA,EAAK0G,SAAUA,EAAU/B,UAAWoF,KAAtFG,GA1G4C,uBA2GlBF,YAC/B,cAAC,GAAD,CAAkBhK,IAAKA,EAAK0G,SAAUA,EAAU/B,UAAWoF,KADtDI,GA3G4C,qBA+GnD,OACE,eAAC,IAAD,CAAMC,SAAUb,EAAhB,UACE,cAAC,EAAD,CAAOnK,IAAG,uBAAkBlB,GAAgBmB,IAAKtB,EAAMuB,aAAciK,EAAgBpL,EAAgB,OACrG,eAAC,IAAD,WACE,eAACqK,GAAD,WACE,cAAC,IAAD,UAAUzK,IACTwC,GAAiB8I,GAChB,cAAC,IAAD,CAAKgB,SAAO,EAAC/C,QAAQ,UAArB,SACGpC,EAAgB,IAAK,eAGzB3E,GAAiBmG,GAChB,cAAC,IAAD,CAAK2D,SAAO,EAAC/C,QAAQ,YAArB,SACGpC,EAAgB,IAAK,kBAI3B3E,GAAiBgJ,GAChB,cAAC,IAAD,CAAQjD,WAAS,EAACgB,QAAQ,YAAYgD,GAAG,OAAO9D,QAAS2D,GAAzD,SACGjF,EAAgB,IAAK,cAGzB3E,GAAiB8I,GAAkBC,GAClC,eAAC,IAAD,CAAQhD,WAAS,EAACE,QAASyD,EAAqBK,GAAG,OAAnD,UACGpF,EAAgB,IAAK,kBADxB,QACgD+D,KAGjD1I,GAAiB0D,GAAcsF,GAC9B,cAAC,IAAD,CAAQjC,QAAQ,SAAShB,WAAS,EAACE,QAAS0D,GAAoBI,GAAG,OAAnE,SACGpF,EAAgB,IAAK,0BAI5B,eAAC,IAAD,CAAYqF,EAAE,IAAd,UACE,cAAC9B,GAAD,CAAe+B,QAAS,cAACf,EAAD,CAAMgB,MAAM,OAAOrE,MAAM,YAAcI,QAASsD,EAAxE,SACGtI,EAAMqD,UAAYK,EAAgB,IAAK,cAAgBA,EAAgB,IAAK,aAE9E1D,EAAMsH,QACL,eAACF,GAAD,WACE,cAAC,IAAD,CAAM8B,GAAG,IAAItE,MAAM,aAAaC,GAAG,OAAOS,MAAO,CAAE6D,UAAW,UAA9D,SACG1M,IAEH,eAAC,EAAD,WACE,eAAC,IAAD,WAAOiH,EAAgB,IAAK,sBAA5B,OACA,cAAC,GAAD,yBAEF,eAAC,EAAD,WACE,eAAC,IAAD,WAAOA,EAAgB,IAAK,iBAA5B,OACA,cAAC,GAAD,UAAQ1D,EAAMuH,SAAWvH,EAAMwH,kBAEjC,eAAC,EAAD,WACE,eAAC,IAAD,WAAO9D,EAAgB,IAAK,iBAA5B,OACA,cAAC,GAAD,UAAQ1D,EAAMwH,4BC1Mb4B,GAbCjM,YAAOkM,IAAPlM,CAAH,wKAOP,qBAAGG,MAAkBgM,aAAaC,MCQzBC,GAZC,WACd,OACE,cAAC,GAAD,UACGC,IAAQC,EAAM,aAAaC,KAAI,SAACnL,GAAD,OAC9B,8BACE,cAAC,GAAD,CAASA,IAAKA,KADNA,EAAIjC,Y,UCThBqN,GAAkB,KAClBC,GAAiB,MACjBC,GAAmB,QACnBC,GAAkB,SAgDTC,GAzCQ,SAACC,GACtB,IAAIC,EAAQD,EACNE,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTP,QAAS,GA8BX,OA3BIC,GAASH,KACXI,EAASC,MAAQK,KAAKC,MAAMR,EAAQH,IACpCG,GAASC,EAASC,MAAQL,IAGxBG,GAASJ,KACXK,EAASE,OAASI,KAAKC,MAAMR,EAAQJ,IACrCI,GAASC,EAASE,OAASP,IAGzBI,GAASL,KACXM,EAASG,KAAOG,KAAKC,MAAMR,EAAQL,IACnCK,GAASC,EAASG,KAAOT,IAGvBK,GAASN,KACXO,EAASI,MAAQE,KAAKC,MAAMR,EAAQN,IACpCM,GAASC,EAASI,MAAQX,IAGxBM,GA1CoB,KA2CtBC,EAASK,QAAUC,KAAKC,MAAMR,EA3CR,IA4CtBA,GA5CsB,GA4CbC,EAASK,SAGpBL,EAASF,QAAUC,EAEZC,GC3BMQ,GAhBU,SAACC,GAAqE,IAAzBC,EAAwB,uDAAP,GAC/EC,EAAU,GAQhB,OANAC,OAAOC,KAAKJ,GAASK,SAAQ,SAACC,GACxBN,EAAQM,GAAU,IAAML,EAAeM,SAASD,IAClDJ,EAAQ7I,KAAR,UAAgB2I,EAAQM,IAAxB,OAAkCA,EAAOE,OAAO,EAAG,QAIhC,IAAnBN,EAAQ9C,OACH,KAGF8C,EAAQO,KAAK,MCRhBC,GAAWnO,YAAOoO,IAAPpO,CAAH,2EAKRqO,GAAOrO,YAAOsO,IAAPtO,CAAH,2DAIJuO,GAAUvO,IAAO4L,EAAV,4GACF,qBAAGzL,MAAkBC,OAAOoO,cAMjCC,GAAezO,IAAOC,IAAV,oDA6DHyO,GAzDK,WAAO,IAAD,EAQpB1N,qBAAWM,IANbM,EAFsB,EAEtBA,cACAO,EAHsB,EAGtBA,yBACAD,EAJsB,EAItBA,uBACAH,EALsB,EAKtBA,WACAC,EANsB,EAMtBA,iBACAC,EAPsB,EAOtBA,eAEIsE,EAAkBC,cAClBzD,EAAehC,KACf4N,GAAoB1M,EAAiBc,GAAgBlF,KAErDmP,EAAWQ,GAAiBX,GAAe8B,GAAmB,CAAC,YAE/DC,EAAW7L,EAAef,GAAqBe,EAAef,IADhDC,EAAiBD,GACkE,IAAM,EAE7G,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAACyM,GAAD,UACE,cAAC,IAAD,CAAUI,YAAaD,MAEzB,cAACT,GAAD,UACc5H,EAAgB,IAA3ByG,EAA0B,UAASA,EAAT,0BAAkE,eAE/F,eAAC,EAAD,WACE,eAAC,IAAD,WAAOzG,EAAgB,IAAK,uBAA5B,OACA,cAAC,IAAD,UACE,iCAAU3E,EAAD,UAA4BO,EAA5B,YAAwDD,GAAvC,aAG9B,eAAC,EAAD,WACE,eAAC,IAAD,WAAOqE,EAAgB,IAAK,sBAA5B,OACA,cAAC,IAAD,UACE,iCAAU3E,EAAD,UAA4BG,EAA5B,YAA0CG,GAAzB,aAG9B,eAAC,EAAD,WACE,eAAC,IAAD,WAAOqE,EAAgB,IAAK,uBAA5B,OACA,gCACI3E,EAGA,eAACyM,GAAD,CAAMzN,KAAI,oCAA+BqB,GAAkBpB,OAAO,SAASC,IAAI,sBAA/E,0BACYmB,GACV,cAAC,IAAD,CAAawF,MAAM,UAAUgB,GAAG,WAJlC,MAMC,UAGP,cAAC8F,GAAD,UAAUhI,EAAgB,IAAK,uECpDxBuI,GAxBW,WACxB,IAAMvI,EAAkBC,cADM,EAE0DxF,qBAAWM,IAA3FM,EAFsB,EAEtBA,cAAeO,EAFO,EAEPA,yBAA0BD,EAFnB,EAEmBA,uBAAwBH,EAF3C,EAE2CA,WAEzE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,EAAD,WACE,eAAC,IAAD,WAAOwE,EAAgB,IAAK,uBAA5B,OACA,cAAC,IAAD,UACE,iCAAU3E,EAAD,UAA4BO,EAA5B,YAAwDD,GAAvC,aAG9B,eAAC,EAAD,WACE,eAAC,IAAD,WAAOqE,EAAgB,IAAK,sBAA5B,OACA,cAAC,IAAD,UACE,iCAAU3E,EAAD,UAA4BG,EAA5B,YAA0CG,GAAzB,mB,UCXvB6M,GATO/O,IAAOC,IAAV,2KAGG,qBAAGE,MAAkBC,OAAO4O,gBCF5CxO,GAAQR,IAAOO,IAAV,mEAKL0O,GAAUjP,IAAOC,IAAV,wCAIPiP,GAAoBlP,IAAOC,IAAV,qEAcRkP,GATK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQ3N,EAAe,EAAfA,SAC7B,OACE,eAACyN,GAAD,WACE,cAAC,GAAD,CAAOzO,IAAK2O,EAAQ1O,IAAI,cACxB,cAACuO,GAAD,UAAUxN,QCGD4N,GAlBW,WACxB,IAAM9I,EAAkBC,cAExB,OACE,cAAC,GAAD,UACE,eAAC,GAAD,CAAa4I,OAAO,+BAApB,UACE,cAAC,IAAD,CAAS1H,GAAG,MAAZ,SAAmBnB,EAAgB,IAAK,sBACxC,cAAC,IAAD,UACGA,EACC,IACA,wGCIG+I,GAfI,WACjB,IAAM/I,EAAkBC,cAExB,OACE,cAAC,IAAD,CAAMiF,UAAQ,EAAd,SACE,cAAC,IAAD,UACE,eAAC,GAAD,CAAa2D,OAAO,sBAApB,UACE,cAAC,IAAD,CAAS1H,GAAG,MAAZ,SAAmBnB,EAAgB,IAAK,oBACxC,cAAC,IAAD,UAAOA,EAAgB,IAAK,kDCOvBgJ,GAfS,WACtB,IAAMhJ,EAAkBC,cAExB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,GAAD,CAAa4I,OAAO,sBAApB,UACE,cAAC,IAAD,CAAS1H,GAAG,MAAZ,SAAmBnB,EAAgB,IAAK,mBACxC,cAAC,IAAD,UAAOA,EAAgB,IAAK,8ECqCvBiJ,GAhCI,WAAO,IAChBpS,EAAYD,cAAZC,QADe,EAE0B4D,qBAAWM,IAApDM,EAFe,EAEfA,cAAeC,EAFA,EAEAA,WAAY9E,EAFZ,EAEYA,UAC7BwJ,EAAkBC,cAExB,OAAKpJ,EAYAwE,EAIAC,EAID9E,EAAY,EACP,cAAC,GAAD,IAGF,cAAC,GAAD,IAPE,cAAC,GAAD,IAJA,cAAC,IAAD,kBAXL,cAAC,IAAD,CAAM0O,UAAQ,EAAd,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAS/D,GAAG,MAAZ,SAAmBnB,EAAgB,IAAK,yBACxC,cAAC,IAAD,CAAMmB,GAAG,OAAT,SAAiBnB,EAAgB,IAAK,4CACtC,cAACkJ,GAAA,EAAD,UCtBJC,GAAgB1P,IAAOC,IAAV,mLAMf,qBAAGE,MAAkBgM,aAAaC,MAoBvBuD,GAfC,WAGd,OAFuB3O,qBAAWM,IAA1BgE,WAON,eAACoK,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,OANK,cAAC,GAAD,KCZLE,GAAa5P,IAAOC,IAAV,8GACa,qBAAGE,MAAkBC,OAAOoO,cA0B1CqB,UArBH,WACV,IAAMtJ,EAAkBC,cAExB,OACE,cAAC,GAAD,UACE,eAACsJ,EAAA,EAAD,WACE,eAACF,GAAD,WACE,cAAC,IAAD,CAAS7D,GAAG,KAAKgE,KAAK,MAAMtI,MAAM,YAAYC,GAAG,OAAjD,kBAGA,cAAC,IAAD,CAASqE,GAAG,KAAKgE,KAAK,KAAKtI,MAAM,YAAjC,SACGlB,EAAgB,IAAK,wDAG1B,cAAC,GAAD,IACA,cAAC,GAAD","file":"static/js/11.98463ec3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { Nft } from './types'\n\n// mainnet\n// export const NftFarm = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\n// export const NFT = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\n\n// testnet\nexport const NftFarm = '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB'\nexport const NFT = '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Dark chocolate',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'test description',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage: '',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Main no paint',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'test description',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage: '',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Marble',\n    metadata: 'tier-NFT-base-marble.json',\n    description: 'test description',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: '',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 3,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { AbiItem } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\n\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n\n\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: \"\",\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'rarity' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' },\n          { address: NftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: priceMultiplierArr[0].toString(),\n          maxMintPerNft: maxMintPerNftArr[0].toString(),\n          tokenPerBurn: tokenPerBurnArr[0].toString(),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getMinted[0][1]\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getMinted[0][3]\n        const prices = getMinted[0][4]\n\n        console.log('hasClaimed', hasClaimed)\n        console.log('amounts', amounts)\n        console.log('ownerById', ownerById)\n        console.log('maxMintByNft', maxMintByNft)\n        console.log('prices', prices)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n  const contraToken = useERC20(getCakeAddress())\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, NftFarm)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getCakeAddress', getCakeAddress(), NftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier,\n      maxMintPerNft, tokenPerBurn);\n  console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n\n  console.log(ownerById);\n\n\n  const { nftId, name, previewImage, originalImage, description } = nft\n  const PRICE = prices[nft.nftId] || tokenPerBurn; // here we get the price\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  // const nftIndex = hasClaimedArr && hasClaimedArr.indexOf(nftId)\n\n  // const youAreOwner = ownerByIdArr && ownerByIdArr[nftIndex] === account\n\n  const walletCanClaim = !hasClaimed[nftId]\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {PRICE}\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for LIFE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Value if traded in')}:</Text>\n              <Value>10 LIFE</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>{state.nftCount + state.nftBurnCount}</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number burned')}:</Text>\n              <Value>{state.nftBurnCount}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import getTimePeriods from './getTimePeriods'\n\n/**\n * @param {Object} periods Return value from getTimePeriods\n * @return {string} '14h 3m 4s'\n */\nconst formatTimePeriod = (periods: ReturnType<typeof getTimePeriods>, excludePeriods = []) => {\n  const textArr = []\n\n  Object.keys(periods).forEach((period) => {\n    if (periods[period] > 0 && !excludePeriods.includes(period)) {\n      textArr.push(`${periods[period]}${period.substr(0, 1)}`)\n    }\n  })\n\n  if (textArr.length === 0) {\n    return null\n  }\n\n  return textArr.join(' ')\n}\n\nexport default formatTimePeriod\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, OpenNewIcon, Text, Link as UIKitLink, Progress } from '@pancakeswap-libs/uikit'\nimport { BSC_BLOCK_TIME } from 'config'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport formatTimePeriod from 'utils/formatTimePeriod'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst TimeLeft = styled(Heading)`\n  margin-bottom: 16px;\n  text-align: center;\n`\n\nconst Link = styled(UIKitLink)`\n  text-decoration: underline;\n`\n\nconst Message = styled.p`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  padding-top: 16px;\n  text-align: center;\n`\n\nconst ProgressWrap = styled.div`\n  margin-bottom: 16px;\n`\n\nconst NftProgress = () => {\n  const {\n    isInitialized,\n    currentDistributedSupply,\n    totalSupplyDistributed,\n    countBurnt,\n    startBlockNumber,\n    endBlockNumber,\n  } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n  const currentBlock = useBlock()\n  const secondsRemaining = (endBlockNumber - currentBlock) * BSC_BLOCK_TIME\n\n  const timeLeft = formatTimePeriod(getTimePeriods(secondsRemaining), ['seconds'])\n  const totalBlocks = endBlockNumber - startBlockNumber\n  const progress = currentBlock > startBlockNumber ? ((currentBlock - startBlockNumber) / totalBlocks) * 100 : 5\n\n  return (\n    <Card>\n      <CardBody>\n        <ProgressWrap>\n          <Progress primaryStep={progress} />\n        </ProgressWrap>\n        <TimeLeft>\n          {timeLeft ? TranslateString(999, `${timeLeft} left to trade in NFTs`) : TranslateString(999, 'Finished!')}\n        </TimeLeft>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Can be traded until')}:</Text>\n          <div>\n            {!isInitialized ? (\n              '...'\n            ) : (\n              <Link href={`https://bscscan.com/block/${endBlockNumber}`} target=\"_blank\" rel=\"noreferrer noopener\">\n                {`Block ${endBlockNumber}`}\n                <OpenNewIcon color=\"primary\" ml=\"2px\" />\n              </Link>\n            )}{' '}\n          </div>\n        </InfoRow>\n        <Message>{TranslateString(999, 'NFTs can be traded in for CAKE until the above block height')}</Message>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgress\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import styled from 'styled-components'\n\nconst SecondaryCard = styled.div`\n  align-items: start;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 32px;\n  display: flex;\n  padding: 24px;\n`\n\nexport default SecondaryCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Image = styled.img`\n  margin-right: 16px;\n  width: 56px;\n`\n\nconst Content = styled.div`\n  flex: 1;\n`\n\nconst StyledCardContent = styled.div`\n  align-items: start;\n  display: flex;\n`\n\nconst CardContent = ({ imgSrc, children }) => {\n  return (\n    <StyledCardContent>\n      <Image src={imgSrc} alt=\"card icon\" />\n      <Content>{children}</Content>\n    </StyledCardContent>\n  )\n}\n\nexport default CardContent\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport SecondaryCard from './SecondaryCard'\nimport CardContent from './CardContent'\n\nconst NoNftsToClaimCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <SecondaryCard>\n      <CardContent imgSrc=\"/images/present-disabled.svg\">\n        <Heading mb=\"8px\">{TranslateString(999, 'No NFTs to claim')}</Heading>\n        <Text>\n          {TranslateString(\n            999,\n            'You have no NFTs to claim at this time, but you can still see the NFTs in this series below.',\n          )}\n        </Text>\n      </CardContent>\n    </SecondaryCard>\n  )\n}\n\nexport default NoNftsToClaimCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst YouWonCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFTs Avaiable!')}</Heading>\n          <Text>{TranslateString(999, 'Claim an NFT from the options below!')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default YouWonCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst NftInWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFT in wallet')}</Heading>\n          <Text>{TranslateString(999, 'Trade in your NFT for LIFE, or just keep it for your collection.')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftInWalletCard\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NoNftsToClaimCard from './NoNftsToClaimCard'\nimport YouWonCard from './YouWonCard'\nimport NftInWalletCard from './NftInWalletCard'\n\n/**\n * Possible states\n *\n * 1. Disconnected wallet\n * 2. No NFT's to claim\n * 3. You won an NFT\n * 4. NFT in wallet\n */\nconst StatusCard = () => {\n  const { account } = useWallet()\n  const { isInitialized, hasClaimed, balanceOf } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n\n  if (!account) {\n    return (\n      <Card isActive>\n        <CardBody>\n          <Heading mb=\"8px\">{TranslateString(999, 'Wallet Disconnected')}</Heading>\n          <Text mb=\"16px\">{TranslateString(999, 'Connect to see if you have won an NFT!')}</Text>\n          <UnlockButton />\n        </CardBody>\n      </Card>\n    )\n  }\n\n  if (!isInitialized) {\n    return <Text>...</Text>\n  }\n\n  if (!hasClaimed) {\n    return <YouWonCard />\n  }\n\n  if (balanceOf > 0) {\n    return <NftInWalletCard />\n  }\n\n  return <NoNftsToClaimCard />\n}\n\nexport default StatusCard\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  if (!canBurnNft) {\n    return <NftProgressSimple />\n  }\n\n  return (\n    <StyledNtfInfo>\n      <NftProgress />\n      <StatusCard />\n    </StyledNtfInfo>\n  )\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"secondary\">\n            {TranslateString(999, 'Trade in for LIFE, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}