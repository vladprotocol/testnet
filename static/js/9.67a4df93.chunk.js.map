{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","hooks/useWeb3.ts","hooks/useContract.ts","config/constants/nfts.ts","utils/formatBalance.ts","utils/callHelpers.ts","utils/erc20.ts","hooks/useTokenBalance.ts","hooks/useApprove.ts","config/constants/index.ts","hooks/useBlock.ts","config/index.ts","hooks/useAllowance.ts","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","views/Nft/utils/contracts.ts","views/Nft/contexts/NftProvider.tsx","views/Nft/components/ClaimNftModal.tsx","views/Nft/components/BurnNftModal.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","utils/getTimePeriods.ts","utils/formatTimePeriod.ts","views/Nft/components/NftProgress.tsx","views/Nft/components/NftProgressSimple.tsx","views/Nft/components/NftInfo.tsx","views/Nft/index.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useRabbitMintingFarm","nftFarm","usePancakeRabbits","nft","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","nftFarmContract","nftContract","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","getContract","provider","getAllowance","allowance","call","getTokenBalance","tokenAddress","userAddress","balanceOf","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","useTokenBalance","fastRefresh","res","useApprove","dispatch","useDispatch","onApprove","useCallback","fetchFarmUserDataAsync","useNftApprove","tokenContract","spenderAddress","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","useBlock","BlockContext","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","useNftAllowance","dependency","setAllowance","console","log","fetch","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","nftAbi","getFromWayArray","v","array","t","i","push","fromWei","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","multicall","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","error","fetchContractData","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","canBurnNft","Provider","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","nftMintingContract","contraToken","cakeBalance","cakeInWallet","handleConfirm","mintNFT","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","TransferNftModal","setValue","utils","isAddress","transferFrom","htmlFor","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","nftCount","nftBurnCount","history","useHistory","PRICE","MINTS","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","nftIndex","indexOf","MINTED","MAX_MINT","walletCanClaim","undefined","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","timeLeft","years","months","days","hours","minutes","Math","floor","formatTimePeriod","periods","excludePeriods","textArr","Object","keys","forEach","period","substr","join","NftProgress","Heading","UIKitLink","textSubtle","secondsRemaining","NftProgressSimple","StyledNtfInfo","NftInfo","StyledHero","Nft","Page","size"],"mappings":"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","file":"static/js/9.67a4df93.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return useContract(nftMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return useContract(nftAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import { Nft } from './types'\n\nexport const NftFarm = '0x9e04f069277ea2092E59575F7De698f5A1d62f62'\nexport const NFT = '0x8D5940Bd327714e2A116246020F7f3A3BCE8d471'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Count Pepes Chocula',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 0,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Vlad Pepes Drakul',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Pepes in Stone',\n    metadata: 'tier-NFT-base-marble.json',\n    description:\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 10,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'rarity' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' },\n          { address: NftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n  const contraToken = useERC20(getCakeAddress())\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, NftFarm)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getCakeAddress', getCakeAddress(), NftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/nfts'\nimport { useHistory } from 'react-router-dom'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 44px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n  const history = useHistory()\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  const { nftId, name, previewImage, originalImage, description } = nft\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\n  const MINTS = myMints[nftId] || 0\n  console.log(nftId, '?myMints', myMints, 'MINTS', MINTS)\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  // not sure about this, you need to check if this oser own this nft in the view nft page.\n  const youAreTheLastOwner = ownerById && ownerById[nftIndex] && ownerById[nftIndex].toString() === account.toString()\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < maxMintPerNft\n\n  // console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  // console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n  // console.log(nftId, 'walletCanClaim', walletCanClaim, maxMintPerNft, MINTED, MAX_MINT)\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {PRICE} LIFE\n          </Button>\n        )}\n        {isInitialized && loggedIn && MINTS > 0 && (\n          <Button fullWidth onClick={() => history.push(`detail/${nftId}`)} mt=\"24px\">\n            <Text>\n              View NFT ({MINTED}/{MAX_MINT} MINTED)\n            </Text>\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for LIFE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>{state.nftCount + state.nftBurnCount}</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Owned By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import getTimePeriods from './getTimePeriods'\n\n/**\n * @param {Object} periods Return value from getTimePeriods\n * @return {string} '14h 3m 4s'\n */\nconst formatTimePeriod = (periods: ReturnType<typeof getTimePeriods>, excludePeriods = []) => {\n  const textArr = []\n\n  Object.keys(periods).forEach((period) => {\n    if (periods[period] > 0 && !excludePeriods.includes(period)) {\n      textArr.push(`${periods[period]}${period.substr(0, 1)}`)\n    }\n  })\n\n  if (textArr.length === 0) {\n    return null\n  }\n\n  return textArr.join(' ')\n}\n\nexport default formatTimePeriod\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, OpenNewIcon, Text, Link as UIKitLink, Progress } from '@pancakeswap-libs/uikit'\nimport { BSC_BLOCK_TIME } from 'config'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport formatTimePeriod from 'utils/formatTimePeriod'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst TimeLeft = styled(Heading)`\n  margin-bottom: 16px;\n  text-align: center;\n`\n\nconst Link = styled(UIKitLink)`\n  text-decoration: underline;\n`\n\nconst Message = styled.p`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  padding-top: 16px;\n  text-align: center;\n`\n\nconst ProgressWrap = styled.div`\n  margin-bottom: 16px;\n`\n\nconst NftProgress = () => {\n  const {\n    isInitialized,\n    currentDistributedSupply,\n    totalSupplyDistributed,\n    countBurnt,\n    startBlockNumber,\n    endBlockNumber,\n  } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n  const currentBlock = useBlock()\n  const secondsRemaining = (endBlockNumber - currentBlock) * BSC_BLOCK_TIME\n\n  const timeLeft = formatTimePeriod(getTimePeriods(secondsRemaining), ['seconds'])\n  const totalBlocks = endBlockNumber - startBlockNumber\n  const progress = currentBlock > startBlockNumber ? ((currentBlock - startBlockNumber) / totalBlocks) * 100 : 5\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgress\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  if (!canBurnNft) {\n    return <NftProgressSimple />\n  }\n\n  return (\n    <StyledNtfInfo>\n      <NftProgress />\n    </StyledNtfInfo>\n  )\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"#5ca269\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"#5ca269\">\n            {TranslateString(999, 'Trade in for LIFE, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}