{"version":3,"sources":["config/constants/legendary.ts","hooks/useTokenBalance.ts","hooks/useApprove.ts","hooks/useBlock.ts","hooks/useAllowance.ts","views/MyLegendaryCollection/components/InfoRow.tsx","views/MyLegendaryCollection/components/Image.tsx","views/MyLegendaryCollection/utils/contracts.ts","views/MyLegendaryCollection/contexts/NftProvider.tsx","views/MyLegendaryCollection/components/ClaimNftModal.tsx","views/MyLegendaryCollection/components/BurnNftModal.tsx","views/MyLegendaryCollection/components/TransferNftModal.tsx","views/MyLegendaryCollection/components/NftCard/index.tsx","views/MyLegendaryCollection/components/NftGrid.tsx","views/MyLegendaryCollection/components/NftList.tsx","views/MyLegendaryCollection/components/NftProgressSimple.tsx","views/MyLegendaryCollection/components/NftInfo.tsx","views/MyLegendaryCollection/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","useApprove","lpContract","dispatch","useDispatch","masterChefContract","useMasterchef","onApprove","useCallback","approve","tx","fetchFarmUserDataAsync","useNftApprove","tokenContract","spenderAddress","ethers","constants","MaxUint256","send","from","useBlock","useContext","BlockContext","useNftAllowance","dependency","allowance","setAllowance","console","log","toString","fetch","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getFromWayArray","v","array","t","length","i","push","fromWei","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","multicall","nftFarm","address","name","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","nftContract","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","on","title","tokenAmount","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","StyledNotFound","Header","InfoBlock","Button","attrs","SmallCard","Card","NftCard","isOpen","nftCount","nftBurnCount","originalImage","fileType","description","tokenSupply","metadata","MINTS","nftIndex","indexOf","MINTED","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","walletCanClaim","undefined","walletOwnsNft","fetchDetails","ChevronUpIcon","ChevronDownIcon","isDataFetched","handleSuccess","useModal","onPresentTransferModal","isActive","width","loop","autoPlay","muted","kind","outline","mt","p","as","textAlign","Page","NftGrid","BaseLayout","mediaQueries","sm","NftList","filteredNft","nfts","forEach","key","orderBy","map","NftProgressSimple","myNFTs","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","Nft","history","useHistory","size"],"mappings":"mIAEA,sGAAO,IAAMA,EAAU,6CACVC,EAAM,6CACNC,EAAkB,KAIhBC,IAFK,I,oNCuBPC,EAAiB,WAAO,IAC3BC,EAAgBC,cAAhBD,YAD0B,EAEIE,qBAFJ,mBAE3BC,EAF2B,KAEdC,EAFc,KAclC,OAVAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQC,EAAeC,YAAYC,EAASC,eAD5C,SAEuBH,EAAaI,QAAQR,cAAcS,OAF1D,OAEQC,EAFR,OAGET,EAAe,IAAIU,IAAUD,IAH/B,4CADc,uBAAC,WAAD,wBAOdE,KACC,CAACf,IAEGG,GAGIa,EAAmB,SAACC,GAA0B,IAAD,EAC1Bf,mBAAS,IAAIY,IAAU,IADG,mBACjDI,EADiD,KACxCC,EADwC,KAEhDnB,EAAgBC,cAAhBD,YAYR,OAVAK,qBAAU,YACU,uCAAG,8BAAAC,EAAA,6DACbC,EAAeC,YAAYC,EAASC,eADvB,SAEDH,EAAaI,QAAQS,UAAU,8CAA8CR,OAF5E,OAEbS,EAFa,OAGnBF,EAAW,IAAIL,IAAUO,IAHN,2CAAH,qDAMlBC,KACC,CAACL,EAAcjB,IAEXkB,GAGMK,IArDS,SAACN,GAA0B,IAAD,EAClBf,mBAAS,IAAIY,IAAU,IADL,mBACzCI,EADyC,KAChCC,EADgC,OAEuBK,cAA/DC,EAFwC,EAExCA,QAASC,EAF+B,EAE/BA,SACTC,EAAgB1B,cAAhB0B,YAaR,OAXAtB,qBAAU,WAMJoB,GAAWC,GALG,uCAAG,4BAAApB,EAAA,sEACDsB,YAAgBF,EAAUT,EAAcQ,GADvC,OACbI,EADa,OAEnBV,EAAW,IAAIL,IAAUe,IAFN,2CAAH,oDAMhBP,KAED,CAACG,EAASC,EAAUT,EAAcU,IAE9BT,I,4LChBIY,EAAa,SAACC,GACzB,IAAMC,EAAWC,cACTR,EAAiCD,cAAjCC,QACFS,EAAqBC,cAY3B,MAAO,CAAEC,UAVaC,sBAAW,sBAAC,4BAAA/B,EAAA,+EAEbgC,YAAQP,EAAYG,EAAoBT,GAF3B,cAExBc,EAFwB,OAG9BP,EAASQ,YAAuBf,IAHF,kBAIvBc,GAJuB,0DAMvB,GANuB,yDAQ/B,CAACd,EAASO,EAAUD,EAAYG,MA4DxBO,EAAgB,SAACC,EAAyBC,GAA4B,IACzElB,EAAYD,cAAZC,QAYR,OAXkBY,sBAAW,sBAAC,4BAAA/B,EAAA,+EAEToC,EAAc/B,QAC5B2B,QAAQK,EAAgBC,SAAOC,UAAUC,YACzCC,KAAK,CAAEC,KAAMvB,IAJU,cAEpBc,EAFoB,yBAKnBA,GALmB,0DAOnB,GAPmB,yDAS3B,CAACd,EAASkB,EAAgBD,M,iCC9F/B,oBAQeO,IALE,WAEf,OADsBC,qBAAWC,O,uIC+CtBC,G,cAAkB,SAACV,EAAyBC,EAAwBU,GAAsB,IAC7F5B,EAAiCD,cAAjCC,QAD4F,EAElEvB,mBAAS,MAFyD,mBAE7FoD,EAF6F,KAElFC,EAFkF,KAiBpG,OAbAlD,qBAAU,YACG,uCAAG,4BAAAC,EAAA,+EAEQoC,EAAc/B,QAAQ2C,UAAU7B,EAASkB,GAAgB/B,OAFjE,OAEJiB,EAFI,OAGV0B,EAAa,IAAIzC,IAAUe,IAHjB,gDAKV2B,QAAQC,IAAI,KAAEC,YACdH,EAAa,MANH,yDAAH,qDASXI,KACC,CAAClC,EAASkB,EAAgBD,EAAeW,IAErCC,K,qPC5DMM,EANCC,IAAOC,IAAV,yG,OCOPC,EAAYF,IAAOC,IAAV,2IACO,qBAAGE,MAAkBC,OAAOC,eAO5CC,EAAcN,IAAOO,IAAV,oMA2BFC,EAhBqB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,aACzCC,EAAe,cAACN,EAAD,CAAaG,IAAKA,EAAKC,IAAKA,IAEjD,OACE,cAACR,EAAD,UACGS,EACC,mBAAGE,KAAMF,EAAcG,OAAO,SAASC,IAAI,sBAA3C,SACGH,IAGHA,K,uECxBKI,GAAiB,SAACC,GAC7B,IAAMC,EAAUC,GAChB,OAAOxE,aAAYuE,EAAQnF,IAAKkF,IAQrBG,GAAkB,SAACC,GAC9B,IAAKA,EAAG,MAAO,GAGf,IAFA,IAAMC,EAAQ,GACRC,EAAIF,EAAEG,OACHC,EAAI,EAAGA,EAAIF,EAAGE,IAChBJ,EAAEI,GAGLH,EAAMI,KAAKC,mBAAQN,EAAEI,GAAG5B,WAAY,UAFpCyB,EAAMI,KAAK,GAKf,OAAOJ,GAGIM,GAAa,SAACP,GACzB,IAAKA,EAAG,MAAO,GACf,IAAMC,EAAQ,GACd,IAAKD,EAAG,MAAO,GAEf,IADA,IAAME,EAAIF,EAAEG,OACHC,EAAI,EAAGA,EAAIF,EAAGE,IAChBJ,EAAEI,GAGLH,EAAMI,KAAKG,SAASR,EAAEI,GAAG5B,aAFzByB,EAAMI,KAAK,GAKf,OAAOJ,GAGIQ,GAAW,SAACT,GACvB,IAAMC,EAAQ,GACd,IAAKD,EAAG,MAAO,GAEf,IADA,IAAME,EAAIF,EAAEG,OACHC,EAAI,EAAGA,EAAIF,EAAGE,IAChBJ,EAAEI,GAGLH,EAAMI,KAAKK,WAAWV,EAAEI,GAAG5B,aAF3ByB,EAAMI,KAAK,GAKf,OAAOJ,GClBIU,GAAqBC,wBAA8B,MAgNjDC,GA9MiC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3CC,EAAYC,kBAAO,GADuC,EAEtChG,mBAAgB,CACxCiG,eAAe,EACfC,WAAY,GACZC,UAAW,GACXC,WAAY,EACZC,iBAAkB,EAClBC,eAAgB,EAChBC,uBAAwB,EACxBC,yBAA0B,EAC1BtF,UAAW,EACXuF,OAAQ,GAERC,qBAAqB,EACrBC,OAAQ,GACRC,gBAAiB,EACjBC,cAAe,EACfC,aAAc,EAEdC,QAAS,GACTC,aAAc,GACdC,OAAQ,GACRC,QAAS,KAvBqD,mBAEzDC,EAFyD,KAElDC,EAFkD,KAyBxD7F,EAAYD,cAAZC,QACF8F,EAAetE,cAEbkD,EAAkBkB,EAAlBlB,cAGR9F,qBAAU,YACe,uCAAG,sEAAAC,EAAA,+EAcZkH,YAAUC,EAAS,CAC3B,CAAEC,QAAS/H,IAASgI,KAAM,oBAC1B,CAAED,QAAS/H,IAASgI,KAAM,kBAC1B,CAAED,QAAS/H,IAASgI,KAAM,cAC1B,CAAED,QAAS/H,IAASgI,KAAM,0BAC1B,CAAED,QAAS/H,IAASgI,KAAM,4BAC1B,CAAED,QAAS/H,IAASgI,KAAM,uBAC1B,CAAED,QAAS/H,IAASgI,KAAM,UAC1B,CAAED,QAAS/H,IAASgI,KAAM,mBAC1B,CAAED,QAAS/H,IAASgI,KAAM,iBAC1B,CAAED,QAAS/H,IAASgI,KAAM,kBAxBN,oCAGpBC,EAHoB,KAIpBC,EAJoB,KAKpBC,EALoB,KAMpBC,EANoB,KAOpBC,EAPoB,KASpBC,EAToB,KAUpBC,EAVoB,KAWpBC,EAXoB,KAYpBC,EAZoB,KAapBC,EAboB,mBA4BkBT,EA5BlB,GA4BfrB,EA5Be,mBA6BgBsB,EA7BhB,GA6BfrB,EA7Be,mBA8BYsB,EA9BZ,GA8BfxB,EA9Be,mBA+BwByB,EA/BxB,GA+BftB,EA/Be,mBAgC0BuB,EAhC1B,GAgCftB,EAhCe,KAkCtBY,GAAS,SAACgB,GAAD,mBAAC,eACLA,GADI,IAEPnC,eAAe,EACfG,WAAYA,EAAWiC,WACvBhC,iBAAkBA,EAAiBgC,WACnC/B,eAAgBA,EAAe+B,WAC/B7B,yBAA0BA,EAAyB6B,WACnD9B,uBAAwBA,EAAuB8B,WAC/C3B,oBAAqBqB,EAAuB,GAC5CpB,OAAQqB,EAAU,GAAGxE,WACrBoD,gBAAiBlB,WAAWuC,EAAmB,GAAGzE,YAClDqD,cAAerB,SAAS0C,EAAiB,GAAG1E,YAC5CsD,cD3GiB9B,EC2GQmD,EAAgB,GD1G5CnD,EACEU,WAAWJ,mBAAQN,EAAExB,WAAY,UADzB,KADS,IAACwB,KC6DG,kDAiDtB1B,QAAQgF,MAAM,mBAAd,MAjDsB,0DAAH,qDAqDvBC,KACC,CAACtC,EAAemB,IAGnBjH,qBAAU,WAmFJoB,GAlFmB,uCAAG,sDAAAnB,EAAA,sEAEhBoI,EAAc7D,KAFE,SAIE2C,YAAUC,EAAS,CAAC,CAAEC,QAAS/H,IAASgI,KAAM,YAAagB,OAAQ,CAAClH,MAJtE,cAIhBmH,EAJgB,OAQhBxC,EAAawC,EAAU,GAAG,GAC1B3B,EAAUxB,GAAWmD,EAAU,GAAG,IAClCvC,EAAYuC,EAAU,GAAG,GACzB1B,EAAevB,GAASiD,EAAU,GAAG,IACrCzB,EAASlC,GAAgB2D,EAAU,GAAG,IACtCxB,EAAUzB,GAASiD,EAAU,GAAG,IAOtCpF,QAAQC,IAAI,UAAW2D,GApBD,UAsBEsB,EAAY/H,QAAQS,UAAUK,GAASb,OAtBzC,WAsBhBQ,EAtBgB,OAwBlBuF,EAAmB,KAInBvF,EAAY,GA5BM,iBA0CpB,IAbMyH,EA7Bc,+BAAAvI,EAAA,MA6BS,WAAOwI,GAAP,iBAAAxI,EAAA,+EAEHoI,EAAY/H,QAAQoI,oBAAoBtH,EAASqH,GAAOlI,OAFrD,cAEnBoI,EAFmB,gBAGLN,EAAY/H,QAAQsI,WAAWD,GAASpI,OAHnC,cAGnBsI,EAHmB,yBAKlB,CAACxD,SAASwD,EAAO,IAAKxD,SAASsD,EAAS,MALtB,2DAOlB,MAPkB,0DA7BT,sDAwCdG,EAAkB,GAEf7D,EAAI,EAAGA,EAAIlE,EAAWkE,IAC7B6D,EAAgB5D,KAAKsD,EAAqBvD,IA3CxB,iBA8CgB8D,QAAQC,IAAIF,GA9C5B,QA8CdG,EA9Cc,OAkDpB3C,EAAS2C,EAAsBC,QAAO,SAACC,EAAOC,GAC5C,IAAKA,EACH,OAAOD,EAFmD,kBAKnCC,EALmC,GAKrDP,EALqD,KAK9CF,EAL8C,KAO5D,OAAO,2BACFQ,GADL,kBAEGN,EAAQM,EAAMN,GAAN,sBAAmBM,EAAMN,IAAzB,CAAiCF,IAAW,CAACA,OAEvD,IA7DiB,QAgEtB1B,GAAS,SAACgB,GAAD,mBAAC,eACLA,GADI,IAEPnC,eAAe,EACfC,aACAC,YACAjF,YACAuF,SAEAM,UACAC,eACAC,SACAC,eA3EoB,kDA8EtB5D,QAAQgF,MAAM,mBAAd,MA9EsB,0DAAH,oDAmFrBC,KAED,CAACtC,EAAe1E,EAAS6F,IAE5BjH,qBAAU,WACR,OAAO,WACL4F,EAAUyD,SAAU,KAErB,CAACzD,IAEJ,IAAM0D,EAAapC,GAAgBF,EAAMb,eAgBzC,OACE,cAACX,GAAmB+D,SAApB,CAA6BC,MAAK,2BAAOxC,GAAP,IAAcsC,aAAYG,YAhB1C,SAACZ,GAAD,OAAmB7B,EAAMV,OAAOuC,IAgBuBa,aAVtD,WAIf9D,EAAUyD,SACZpC,GAAS,SAACgB,GAAD,mBAAC,eAAoBA,GAArB,IAAgCnC,eAAe,UAK1D,SACGH,K,2DCpODgE,GAAQnG,YAAOoG,IAAPpG,CAAH,iDAILqG,GAAerG,IAAOC,IAAV,oDAIZqG,GAAUtG,IAAOC,IAAV,0GAiGEsG,GA3FqC,SAAC,GAAmC,IAAjCpF,EAAgC,EAAhCA,IAAKqF,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACnDpK,oBAAS,GAD0C,mBAC9EqK,EAD8E,KACnEC,EADmE,OAEnDtK,oBAAS,GAF0C,mBAE9EuK,EAF8E,KAEnEC,EAFmE,OAG3DxK,mBAAS,MAHkD,mBAG9EsI,EAH8E,KAGvEmC,EAHuE,KAI/EC,EAAkBC,cAChBpJ,EAAYD,cAAZC,QACFqJ,EAAqBC,aAAqBpL,KAC1CqL,EAAcC,aAASvK,gBACvB4C,EAAYF,aAAgB4H,EAAarL,IAAS8K,GAClDrI,EAAYK,aAAcuI,EAAarL,KACvCuL,EAAc3J,aAAgBb,gBAC9ByK,EAAeC,aAAiBF,GAKhCG,EAAa,uCAAG,sBAAA/K,EAAA,yDACF,OAAdgD,EADgB,0EAMZwH,EAAmBnK,QACtB2K,QAAQtG,EAAIkE,OACZnG,KAAK,CAAEC,KAAMvB,IACb8J,GAAG,WAAW,WACbf,GAAa,MAEde,GAAG,WAAW,WACbjB,IACAD,OAEDkB,GAAG,SAAS,WACX/H,QAAQgF,MAAMA,GACdmC,EAAS,uBACTH,GAAa,MAnBC,uDAsBlBhH,QAAQgF,MAAM,sBAAd,MAtBkB,yDAAH,qDAgCnB,OANAnI,qBAAU,WACa,IAAjB8K,GACFR,EAAS,6CAEV,CAACQ,EAAcR,IAGhB,eAAC,IAAD,CAAOa,MAAK,wBAAmBxG,EAAIyG,YAAvB,SAA2CnB,UAAWA,EAAlE,UACE,eAACJ,GAAD,WACG1B,GACC,cAAC,IAAD,CAAMkD,MAAM,UAAUC,GAAG,MAAzB,SACGnD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOoC,EAAgB,IAAK,oBAA5B,OACA,cAACZ,GAAD,wBAAehF,EAAI2C,KAAnB,iBAGJ,eAACwC,GAAD,WACE,cAAC,IAAD,CACEyB,WAAS,EACTC,UAAWpK,GAAWgJ,GAAaF,GAAajH,EAAY,EAC5DwI,QAAO,sBAAE,sBAAAxL,EAAA,sEAELoK,GAAa,GAFR,SAGCtI,IAHD,OAILsI,GAAa,GAJR,gDAMLA,GAAa,GACblH,QAAQgF,MAAR,MAPK,yDAHX,qBAiBA,cAAC,IAAD,CACEoD,WAAS,EACTE,QAAST,EACTQ,UAAWpK,GAAW8I,GAAaY,GAAgB,GAAK7H,GAAa,EAHvE,SAKGsH,EAAgB,IAAK,oBCtG1BZ,GAAQnG,YAAOoG,IAAPpG,CAAH,iDAILqG,GAAerG,IAAOC,IAAV,oDAIZqG,GAAUtG,IAAOC,IAAV,0GA+EEiI,GAzEmC,SAAC,GAA6C,IAA3C/G,EAA0C,EAA1CA,IAAKgH,EAAqC,EAArCA,SAAU3B,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EAC3DpK,oBAAS,GADkD,mBACtFqK,EADsF,KAC3EC,EAD2E,OAEnEtK,mBAAS,MAF0D,mBAEtFsI,EAFsF,KAE/EmC,EAF+E,OAG7DzK,oBAAS,GAHoD,mBAGtF+L,EAHsF,KAG5EC,EAH4E,KAIvFtB,EAAkBC,cAChBpJ,EAAYD,cAAZC,QACFqJ,EAAqBC,aAAqBpL,KAE1C0L,EAAa,uCAAG,8BAAA/K,EAAA,oFAEA0L,EAFA,GAEXhD,EAFW,cAIZ8B,EAAmBnK,QACtBwL,QAAQnD,GACRjG,KAAK,CAAEC,KAAMvB,IACb8J,GAAG,WAAW,WACbf,GAAa,MAEde,GAAG,WAAW,WACbjB,IACAD,OAEDkB,GAAG,SAAS,WACX/H,QAAQgF,MAAMA,GACdmC,EAAS,sBACTH,GAAa,MAjBC,sDAoBlBhH,QAAQgF,MAAM,sBAAd,MApBkB,wDAAH,qDAwBnB,OACE,eAAC,IAAD,CAAOgD,MAAOZ,EAAgB,IAAK,gBAAiBN,UAAWA,EAA/D,UACE,eAAC,GAAD,WACG9B,GACC,cAAC,IAAD,CAAMkD,MAAM,UAAUC,GAAG,MAAzB,SACGnD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOoC,EAAgB,IAAK,YAA5B,OACA,cAAC,GAAD,wBAAe5F,EAAI2C,KAAnB,cAEF,eAAC,EAAD,WACE,eAAC,IAAD,WAAOiD,EAAgB,IAAK,oBAA5B,OACA,eAAC,GAAD,eAAS/K,IAAT,iBAGJ,eAAC,GAAD,WACE,cAAC,IAAD,CAAM6L,MAAM,UAAZ,SACGd,EAAgB,IAAK,qFAExB,cAAC,IAAD,CAAMc,MAAM,UAAZ,SAAuBd,EAAgB,IAAK,uDAE9C,eAAC,GAAD,CAAcwB,MAAO,CAAEC,WAAY,SAAUC,QAAS,eAAtD,UACE,cAAC,IAAD,CAAUC,QAASN,EAAUO,MAAM,KAAKC,SAAU,kBAAMP,GAAaD,MACrE,cAAC,IAAD,CAAMS,GAAG,MAAMZ,QAAS,kBAAMI,GAAaD,IAAWG,MAAO,CAAEO,OAAQ,WAAvE,SACG/B,EAAgB,IAAK,qBAG1B,eAAC,GAAD,WACE,cAAC,IAAD,CAAQgB,WAAS,EAACgB,QAAQ,YAAYd,QAASxB,EAA/C,SACGM,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQgB,WAAS,EAACE,QAAST,EAAeQ,UAAWpK,GAAW8I,IAAc0B,EAA9E,SACGrB,EAAgB,IAAK,oB,qBC/E1BZ,GAAQnG,YAAOoG,IAAPpG,CAAH,iDAILqG,GAAerG,IAAOC,IAAV,oDAIZqG,GAAUtG,IAAOC,IAAV,0GAMP+I,GAAQhJ,IAAOiJ,MAAV,0GACA,qBAAG9I,MAAkBC,OAAO8I,QAmFxBC,GA7E2C,SAAC,GAA6C,IAA3ChI,EAA0C,EAA1CA,IAAKgH,EAAqC,EAArCA,SAAU3B,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACnEpK,oBAAS,GAD0D,mBAC9FqK,EAD8F,KACnFC,EADmF,OAE3EtK,mBAAS,IAFkE,mBAE9F2J,EAF8F,KAEvFoD,EAFuF,OAG3E/M,mBAAS,MAHkE,mBAG9FsI,EAH8F,KAGvFmC,EAHuF,KAI/FC,EAAkBC,cAChBpJ,EAAYD,cAAZC,QACFiH,EAAcwE,aAAkBtN,KAEhCyL,EAAa,uCAAG,sBAAA/K,EAAA,kEAEK6M,KAAKC,MAAMC,UAAUxD,GAF1B,gBAKhBc,EAASC,EAAgB,IAAK,wCALd,sCAOVlC,EAAY/H,QACf2M,aAAa7L,EAASoI,EAAOmC,EAAS,IACtCjJ,KAAK,CAAEC,KAAMvB,IACb8J,GAAG,WAAW,WACbf,GAAa,MAEde,GAAG,WAAW,WACbjB,IACAD,OAEDkB,GAAG,SAAS,WACX/H,QAAQgF,MAAMA,GACdmC,EAAS,0BACTH,GAAa,MApBD,yDAwBlBhH,QAAQgF,MAAM,0BAAd,MAxBkB,0DAAH,qDAiCnB,OACE,eAAC,IAAD,CAAOgD,MAAOZ,EAAgB,IAAK,gBAAiBN,UAAWA,EAA/D,UACE,eAAC,GAAD,WACG9B,GACC,cAAC,IAAD,CAAMkD,MAAM,UAAUC,GAAG,MAAzB,SACGnD,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAOoC,EAAgB,IAAK,gBAA5B,OACA,cAAC,GAAD,wBAAe5F,EAAI2C,KAAnB,cAEF,eAACkF,GAAD,CAAOU,QAAQ,kBAAf,UAAkC3C,EAAgB,IAAK,qBAAvD,OACA,cAAC,IAAD,CACE4C,GAAG,kBACH7F,KAAK,UACL8F,KAAK,OACLC,YAAa9C,EAAgB,IAAK,iBAClCf,MAAOA,EACP4C,SAxBa,SAACkB,GAA8C,IACnDC,EAAeD,EAAIhJ,OAA1BkF,MACRoD,EAASW,IAuBHC,UAAWrF,EACXqD,SAAUtB,OAGd,eAAC,GAAD,WACE,cAAC,IAAD,CAAQqB,WAAS,EAACgB,QAAQ,YAAYd,QAASxB,EAA/C,SACGM,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQgB,WAAS,EAACE,QAAST,EAAeQ,UAAWpK,GAAW8I,IAAcV,EAA9E,SACGe,EAAgB,IAAK,oBC7E1BkD,GAAiBjK,IAAOC,IAAV,4JAQdiK,GAASlK,YAAOD,EAAPC,CAAH,iDAiBNmK,IAbgBnK,YAAOoK,KAAQC,MAAM,CAAEtB,QAAS,OAAQhB,WAAW,GAAnD/H,CAAH,gNAaDA,IAAOC,IAAV,sDAITkG,GAAQnG,YAAOoG,IAAPpG,CAAH,iDAILsK,GAAYtK,YAAOuK,IAAPvK,CAAH,+CA0LAwK,GAtLyB,SAAC,GAAa,IAAXrJ,EAAU,EAAVA,IAAU,EACzB9E,mBAAS,CACjCqK,WAAW,EACX+D,QAAQ,EACRC,SAAU,EACVC,aAAc,IALmC,mBAC5CnH,EAD4C,KACrCC,EADqC,KAO7CsD,EAAkBC,cAP2B,EA0B/C3H,qBAAW2C,IAjBbM,EATiD,EASjDA,cACAC,EAViD,EAUjDA,WACAC,EAXiD,EAWjDA,UAEAI,GAbiD,EAYjDkD,WAZiD,EAajDlD,wBAEAqD,GAfiD,EAcjDpD,yBAdiD,EAejDoD,aACAC,EAhBiD,EAgBjDA,aAEAlD,GAlBiD,EAiBjDD,oBAjBiD,EAkBjDC,QACAC,EAnBiD,EAmBjDA,gBACAC,EApBiD,EAoBjDA,cACAC,EArBiD,EAqBjDA,aACAC,EAtBiD,EAsBjDA,QACAC,EAvBiD,EAuBjDA,aACAC,EAxBiD,EAwBjDA,OACAC,EAzBiD,EAyBjDA,QAEM3F,EAAYD,cAAZC,QAER+B,QAAQC,IAAI,yBAA0BgD,EAAwBI,EAAQC,EAAiBC,EAAeC,GACtGxD,QAAQC,IAAI,iBAAkBuD,EAAcC,EAASC,EAAcC,GAOnE3D,QAAQC,IAAI4C,GArCuC,IAuC3C6C,EAAwGlE,EAAxGkE,MAAOvB,EAAiG3C,EAAjG2C,KAAoB8G,GAA6EzJ,EAA3FP,aAA2FO,EAA7EyJ,eAAeC,EAA8D1J,EAA9D0J,SAAUC,EAAoD3J,EAApD2J,YAAoCC,GAAgB5J,EAAvC6J,SAAuC7J,EAA7ByG,YAA6BzG,EAAhB4J,aAE1FE,GADQ3H,EAAOnC,EAAIkE,OACX9B,EAAQ8B,IAAU,GAE1B6F,EAAW3I,GAAcA,EAAW4I,QAAQ9F,GAE5C+F,EAAShI,EAAQ8H,GAAYrJ,SAASuB,EAAQ8H,GAAUrL,YAAc,EAMtEwL,GALWhI,EAAa6H,IAAYrJ,SAASwB,EAAa6H,GAAUrL,YAE/C0C,EAAW,GACZC,EAAU,GAEE,MAAX5E,GAAmBA,EAAQ0N,MAAM,EAAG,IACzDC,EAA+B,MAAX3N,GAAmBA,EAAQ0N,OAAO,GAItDE,GAFyB,MAAX5N,GAAA,UAAsByN,EAAtB,cAA8CE,GAErC,OAAZ3N,GAKX6N,EAAmC,IAAlBvI,QAAkCwI,IAAXN,GAAwBA,EAASlI,EAEzEiF,EAAWlC,EAAYZ,GAEvBsG,EAAgBxD,GAAYA,EAAS3G,OAAS,EAG9CoK,GAFOpI,EAAMiH,OAASoB,IAAgBC,IAEvBtN,sBAAW,sBAAC,kCAAA/B,EAAA,6DAC/BgH,GAAS,SAACgB,GAAD,mBAAC,eAAoBA,GAArB,IAAgCiC,WAAW,OADrB,WAGT1F,KAAZlE,EAHqB,EAGrBA,QAHqB,SAINA,EAAQ4N,SAASrF,GAAOtI,OAJlB,cAIvB2N,EAJuB,gBAKF5N,EAAQ6N,aAAatF,GAAOtI,OAL1B,OAKvB4N,EALuB,OAO7BlH,GAAS,SAACgB,GAAD,mBAAC,eACLA,GADI,IAEPiC,WAAW,EACXqF,eAAe,EACfrB,SAAU7I,SAAS6I,EAAU,IAC7BC,aAAc9I,SAAS8I,EAAc,SAZV,kDAe7BhL,QAAQgF,MAAR,MAf6B,0DAiB9B,CAACU,KAgBE2G,EAAgB,WACpBJ,IACA1F,KAvGiD,EA0GrB+F,YAAS,cAAC,GAAD,CAAe9K,IAAKA,EAAKqF,UAAWwF,KA1GxB,uBA2GtBC,YAAS,cAAC,GAAD,CAAc9K,IAAKA,EAAKgH,SAAUA,EAAU3B,UAAWwF,MA3G1C,wBA4GlBC,YAC/B,cAAC,GAAD,CAAkB9K,IAAKA,EAAKgH,SAAUA,EAAU3B,UAAWwF,MADtDE,GA5G4C,qBAgHnD,OAAI5J,GAAiBkJ,GAAYP,EAAQ,EAErC,eAACX,GAAD,CAAW6B,SAAUR,EAArB,UACgB,QAAbd,GACC,wBAAOuB,MAAM,OAAOC,MAAI,EAACC,UAAQ,EAACC,OAAK,EAAvC,UACE,wBAAQ9L,IAAKmK,EAAehB,KAAK,cACjC,uBAAO4C,KAAK,gBAGF,QAAb3B,GACC,cAAC,EAAD,CAAOpK,IAAKmK,EAAelK,IAAKoD,EAAMnD,aAAcgL,EAAgBf,EAAgB,OAEtF,eAAC,IAAD,WACE,eAACV,GAAD,WACE,cAAC,IAAD,UAAUpG,IACTxB,GAAiBmJ,GAChB,cAAC,IAAD,CAAKgB,SAAO,EAAC1D,QAAQ,UAArB,SACGhC,EAAgB,IAAK,eAGzBzE,IAAkBmJ,GACjB,cAAC,IAAD,CAAKgB,SAAO,EAAC1D,QAAQ,UAArB,sBAIDzG,GAAiB6F,GAChB,cAAC,IAAD,CAAKsE,SAAO,EAAC1D,QAAQ,YAArB,SACGhC,EAAgB,IAAK,kBAI3BzE,GAAiBqJ,GAChB,cAAC,IAAD,CAAQ5D,WAAS,EAACgB,QAAQ,YAAY2D,GAAG,OAAOzE,QAASiE,GAAzD,SACGnF,EAAgB,IAAK,iBAI5B,cAAC,IAAD,CAAY4F,EAAE,IAAd,SACGnJ,EAAMiH,QACL,eAACN,GAAD,WACE,cAAC,IAAD,CAAMyC,GAAG,IAAI/E,MAAM,aAAaC,GAAG,OAAOS,MAAO,CAAEsE,UAAW,UAA9D,SACG/B,IAEH,eAAC,EAAD,WACE,eAAC,IAAD,WAAO/D,EAAgB,IAAK,iBAA5B,OACA,eAAC,GAAD,WACGqE,EADH,IACYL,QAGd,eAAC,EAAD,WACE,eAAC,IAAD,WAAOhE,EAAgB,IAAK,eAA5B,OACA,cAAC,GAAD,UAAQkE,eAUpB,cAAC6B,EAAA,EAAD,UACE,eAAC7C,GAAD,WACE,cAAC,IAAD,CAAUmC,MAAM,OAAOtE,GAAG,QAC1B,cAAC,IAAD,CAAMA,GAAG,OAAT,SAAiBf,EAAgB,IAAK,sBCrO/BgG,GAbC/M,YAAOgN,IAAPhN,CAAH,wKAOP,qBAAGG,MAAkB8M,aAAaC,MCuBzBC,GA1BC,WAAO,IACb5J,EAAYlE,qBAAW2C,IAAvBuB,QAEF6J,EAAc,GAYpB,OAVAC,IAAKC,SAAQ,SAAUnM,EAAKoM,GAAM,IACxBlI,EAA0DlE,EAA1DkE,MACF4F,GAD4D9J,EAAnD2C,KAAmD3C,EAA7CP,aAA6CO,EAA/ByJ,cAA+BzJ,EAAhB2J,YACpCvH,EAAQ8B,IAAU,GAChC1F,QAAQC,IAAIyF,EAAO,WAAY9B,EAAS,QAAS0H,GAE7CA,EAAQ,GACVmC,EAAY1L,KAAKP,MAKnB,cAAC,GAAD,UACGqM,IAAQJ,EAAa,aAAaK,KAAI,SAACtM,GAAD,OACrC,8BACE,cAAC,GAAD,CAASA,IAAKA,KADNA,EAAI2C,YCUP4J,GA5BW,WACxB,IAAM3G,EAAkBC,cADM,EAEmE3H,qBAC/F2C,IADmFuB,GAFvD,EAEtBjB,cAFsB,EAEPO,yBAFO,EAEmBD,uBAFnB,EAE2CH,WAF3C,EAEuDc,SAIjFoK,EAAS,EAQb,OANAN,IAAKC,SAAQ,SAAUnM,EAAKoM,GAAM,IACxBlI,EAAUlE,EAAVkE,MACF4F,EAAQ1H,EAAQ8B,IAAU,EAChCsI,GAAU1C,KAIV,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,EAAD,WACE,eAAC,IAAD,WAAOlE,EAAgB,IAAK,WAA5B,OACA,cAAC,IAAD,UACE,iCAAS4G,cCHNC,IAjBO5N,IAAOC,IAAV,mLAMf,qBAAGE,MAAkB8M,aAAaC,MAKtB,WACS7N,qBAAW2C,IAA1B8D,WAER,OAAO,cAAC,GAAD,MCTH+H,GAAa7N,IAAOC,IAAV,8GACa,qBAAGE,MAAkBC,OAAO0N,cAKnD7D,GAAiBjK,IAAOC,IAAV,4JAQd8N,GAAe/N,YAAOoK,IAAPpK,CAAH,mDAIZgO,GAAehO,YAAOoK,IAAPpK,CAAH,k/BAkEHiO,UAxCH,WACV,IAAMlH,EAAkBC,cAChBpJ,EAAYD,cAAZC,QACFsQ,EAAUC,cAEhB,OAAIvQ,EAEA,cAAC,GAAD,UACE,eAACkP,EAAA,EAAD,WACE,eAACe,GAAD,WACE,cAAC,IAAD,CAASjB,GAAG,KAAKwB,KAAK,MAAMvG,MAAM,UAAUC,GAAG,OAA/C,qCAGA,cAACiG,GAAD,CAAc9F,QAAS,kBAAMiG,EAAQxM,KAAR,kBAA+BgL,GAAG,OAA/D,gCAGA,cAACqB,GAAD,CAAchF,QAAQ,SAASd,QAAS,kBAAMiG,EAAQxM,KAAR,uBAAoCgL,GAAG,OAArF,uBAGA,cAACsB,GAAD,CAAc/F,QAAS,kBAAMiG,EAAQxM,KAAR,4BAAyCgL,GAAG,OAAzE,+BAIF,cAAC,GAAD,IACA,cAAC,GAAD,SAON,cAACI,EAAA,EAAD,UACE,eAAC,GAAD,WACE,cAAC,IAAD,CAAUV,MAAM,OAAOtE,GAAG,QAC1B,cAAC,IAAD,CAAMA,GAAG,OAAT,SAAiBf,EAAgB,IAAK","file":"static/js/15.c92d0e78.chunk.js","sourcesContent":["import { Nft } from './types'\n\nexport const NftFarm = '0x6eF08433EA4885177c83fB9698D8B6F9277BeC5c'\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = []\n\nexport default Nfts\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/legendary'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/legendary'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'rarity' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' },\n          { address: NftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n  const contraToken = useERC20(getCakeAddress())\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, NftFarm)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getCakeAddress', getCakeAddress(), NftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/legendary'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n  LogoIcon,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport Page from 'components/layout/Page'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst SmallCard = styled(Card)`\n  margin: 0 auto;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: true,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  console.log(ownerById)\n\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nft.nftId] || tokenPerBurn // here we get the price\n  const MINTS = myMints[nftId] || 0\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < maxMintPerNft\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  if (isInitialized && loggedIn && MINTS > 0) {\n    return (\n      <SmallCard isActive={walletOwnsNft}>\n        {fileType === 'mp4' && (\n          <video width=\"100%\" loop autoPlay muted>\n            <source src={originalImage} type=\"video/mp4\" />\n            <track kind=\"captions\" />\n          </video>\n        )}\n        {fileType !== 'mp4' && (\n          <Image src={originalImage} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n        )}\n        <CardBody>\n          <Header>\n            <Heading>{name}</Heading>\n            {isInitialized && walletCanClaim && (\n              <Tag outline variant=\"success\">\n                {TranslateString(526, 'Available')}\n              </Tag>\n            )}\n            {isInitialized && !walletCanClaim && (\n              <Tag outline variant=\"failure\">\n                Sold Out\n              </Tag>\n            )}\n            {isInitialized && tokenIds && (\n              <Tag outline variant=\"secondary\">\n                {TranslateString(999, 'In Wallet')}\n              </Tag>\n            )}\n          </Header>\n          {isInitialized && walletOwnsNft && (\n            <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n              {TranslateString(999, 'Transfer')}\n            </Button>\n          )}\n        </CardBody>\n        <CardFooter p=\"2\">\n          {state.isOpen && (\n            <InfoBlock>\n              <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n                {description}\n              </Text>\n              <InfoRow>\n                <Text>{TranslateString(999, 'Number minted')}:</Text>\n                <Value>\n                  {MINTED}/{tokenSupply}\n                </Value>\n              </InfoRow>\n              <InfoRow>\n                <Text>{TranslateString(999, 'Owned By Me')}:</Text>\n                <Value>{MINTS}</Value>\n              </InfoRow>\n            </InfoBlock>\n          )}\n        </CardFooter>\n      </SmallCard>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Text mb=\"16px\">{TranslateString(999, 'loading...')}</Text>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 6;\n    }\n  }\n`\n\nexport default NftGrid\n","import React, { useState, useContext, useCallback } from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/legendary'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport { NftProviderContext } from '../contexts/NftProvider'\n\nconst NftList = () => {\n  const { myMints } = useContext(NftProviderContext)\n\n  const filteredNft = []\n\n  nfts.forEach(function (nft, key) {\n    const { nftId, name, previewImage, originalImage, description } = nft\n    const MINTS = myMints[nftId] || 0\n    console.log(nftId, '?myMints', myMints, 'MINTS', MINTS)\n\n    if (MINTS > 0) {\n      filteredNft.push(nft)\n    }\n  })\n\n  return (\n    <NftGrid>\n      {orderBy(filteredNft, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport nfts from 'config/constants/legendary'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt, myMints } = useContext(\n    NftProviderContext,\n  )\n\n  let myNFTs = 0\n\n  nfts.forEach(function (nft, key) {\n    const { nftId } = nft\n    const MINTS = myMints[nftId] || 0\n    myNFTs += MINTS\n  })\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'My NFTs')}:</Text>\n          <Text>\n            <strong>{myNFTs}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useHistory } from 'react-router-dom'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CustomButton = styled(Button)`\n  margin-right: 20px;\n`\n\nconst GoldenButton = styled(Button)`\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\n  border: 1px solid #a55d07;\n  color: rgb(120, 50, 5);\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n\n  &:focus,\n  &:hover {\n    background-size: 150% 150%;\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n    border: 1px solid rgba(165, 93, 7, 0.6);\n    color: rgba(120, 50, 5, 0.8);\n  }\n  &:active {\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  }\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const history = useHistory()\n\n  if (account) {\n    return (\n      <NftProvider>\n        <Page>\n          <StyledHero>\n            <Heading as=\"h1\" size=\"xxl\" color=\"#5ca269\" mb=\"24px\">\n              My Legendary Collection\n            </Heading>\n            <CustomButton onClick={() => history.push(`my-collection`)} mt=\"24px\">\n              Base and Rare NFTs\n            </CustomButton>\n            <CustomButton variant=\"subtle\" onClick={() => history.push(`my-epic-collection`)} mt=\"24px\">\n              Epic NFTs\n            </CustomButton>\n            <GoldenButton onClick={() => history.push(`my-legendary-collection`)} mt=\"24px\">\n              Legendary NFTs\n            </GoldenButton>\n          </StyledHero>\n          <NftInfo />\n          <NftList />\n        </Page>\n      </NftProvider>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Text mb=\"16px\">{TranslateString(999, 'Empty Collection')}</Text>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}